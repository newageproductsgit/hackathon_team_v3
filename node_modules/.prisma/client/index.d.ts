
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model answers
 * 
 */
export type answers = $Result.DefaultSelection<Prisma.$answersPayload>
/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model questions
 * 
 */
export type questions = $Result.DefaultSelection<Prisma.$questionsPayload>
/**
 * Model user_responses
 * 
 */
export type user_responses = $Result.DefaultSelection<Prisma.$user_responsesPayload>
/**
 * Model room_tbl
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type room_tbl = $Result.DefaultSelection<Prisma.$room_tblPayload>
/**
 * Model game_users
 * 
 */
export type game_users = $Result.DefaultSelection<Prisma.$game_usersPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const questions_difficulty_level: {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard'
};

export type questions_difficulty_level = (typeof questions_difficulty_level)[keyof typeof questions_difficulty_level]

}

export type questions_difficulty_level = $Enums.questions_difficulty_level

export const questions_difficulty_level: typeof $Enums.questions_difficulty_level

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Answers
 * const answers = await prisma.answers.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Answers
   * const answers = await prisma.answers.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.answers`: Exposes CRUD operations for the **answers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answers.findMany()
    * ```
    */
  get answers(): Prisma.answersDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.questionsDelegate<ExtArgs>;

  /**
   * `prisma.user_responses`: Exposes CRUD operations for the **user_responses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_responses
    * const user_responses = await prisma.user_responses.findMany()
    * ```
    */
  get user_responses(): Prisma.user_responsesDelegate<ExtArgs>;

  /**
   * `prisma.room_tbl`: Exposes CRUD operations for the **room_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Room_tbls
    * const room_tbls = await prisma.room_tbl.findMany()
    * ```
    */
  get room_tbl(): Prisma.room_tblDelegate<ExtArgs>;

  /**
   * `prisma.game_users`: Exposes CRUD operations for the **game_users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Game_users
    * const game_users = await prisma.game_users.findMany()
    * ```
    */
  get game_users(): Prisma.game_usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    answers: 'answers',
    categories: 'categories',
    questions: 'questions',
    user_responses: 'user_responses',
    room_tbl: 'room_tbl',
    game_users: 'game_users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "answers" | "categories" | "questions" | "user_responses" | "room_tbl" | "game_users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      answers: {
        payload: Prisma.$answersPayload<ExtArgs>
        fields: Prisma.answersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.answersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.answersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          findFirst: {
            args: Prisma.answersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.answersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          findMany: {
            args: Prisma.answersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>[]
          }
          create: {
            args: Prisma.answersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          createMany: {
            args: Prisma.answersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.answersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          update: {
            args: Prisma.answersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          deleteMany: {
            args: Prisma.answersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.answersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.answersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          aggregate: {
            args: Prisma.AnswersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnswers>
          }
          groupBy: {
            args: Prisma.answersGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnswersGroupByOutputType>[]
          }
          count: {
            args: Prisma.answersCountArgs<ExtArgs>
            result: $Utils.Optional<AnswersCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      questions: {
        payload: Prisma.$questionsPayload<ExtArgs>
        fields: Prisma.questionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findFirst: {
            args: Prisma.questionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findMany: {
            args: Prisma.questionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>[]
          }
          create: {
            args: Prisma.questionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          createMany: {
            args: Prisma.questionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.questionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          update: {
            args: Prisma.questionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          deleteMany: {
            args: Prisma.questionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.questionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.questionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestions>
          }
          groupBy: {
            args: Prisma.questionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionsCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionsCountAggregateOutputType> | number
          }
        }
      }
      user_responses: {
        payload: Prisma.$user_responsesPayload<ExtArgs>
        fields: Prisma.user_responsesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_responsesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_responsesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          findFirst: {
            args: Prisma.user_responsesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_responsesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          findMany: {
            args: Prisma.user_responsesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>[]
          }
          create: {
            args: Prisma.user_responsesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          createMany: {
            args: Prisma.user_responsesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.user_responsesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          update: {
            args: Prisma.user_responsesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          deleteMany: {
            args: Prisma.user_responsesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_responsesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.user_responsesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_responsesPayload>
          }
          aggregate: {
            args: Prisma.User_responsesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_responses>
          }
          groupBy: {
            args: Prisma.user_responsesGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_responsesGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_responsesCountArgs<ExtArgs>
            result: $Utils.Optional<User_responsesCountAggregateOutputType> | number
          }
        }
      }
      room_tbl: {
        payload: Prisma.$room_tblPayload<ExtArgs>
        fields: Prisma.room_tblFieldRefs
        operations: {
          findUnique: {
            args: Prisma.room_tblFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.room_tblFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload>
          }
          findFirst: {
            args: Prisma.room_tblFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.room_tblFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload>
          }
          findMany: {
            args: Prisma.room_tblFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload>[]
          }
          create: {
            args: Prisma.room_tblCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload>
          }
          createMany: {
            args: Prisma.room_tblCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.room_tblDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload>
          }
          update: {
            args: Prisma.room_tblUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload>
          }
          deleteMany: {
            args: Prisma.room_tblDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.room_tblUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.room_tblUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_tblPayload>
          }
          aggregate: {
            args: Prisma.Room_tblAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom_tbl>
          }
          groupBy: {
            args: Prisma.room_tblGroupByArgs<ExtArgs>
            result: $Utils.Optional<Room_tblGroupByOutputType>[]
          }
          count: {
            args: Prisma.room_tblCountArgs<ExtArgs>
            result: $Utils.Optional<Room_tblCountAggregateOutputType> | number
          }
        }
      }
      game_users: {
        payload: Prisma.$game_usersPayload<ExtArgs>
        fields: Prisma.game_usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.game_usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.game_usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload>
          }
          findFirst: {
            args: Prisma.game_usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.game_usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload>
          }
          findMany: {
            args: Prisma.game_usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload>[]
          }
          create: {
            args: Prisma.game_usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload>
          }
          createMany: {
            args: Prisma.game_usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.game_usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload>
          }
          update: {
            args: Prisma.game_usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload>
          }
          deleteMany: {
            args: Prisma.game_usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.game_usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.game_usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_usersPayload>
          }
          aggregate: {
            args: Prisma.Game_usersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame_users>
          }
          groupBy: {
            args: Prisma.game_usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Game_usersGroupByOutputType>[]
          }
          count: {
            args: Prisma.game_usersCountArgs<ExtArgs>
            result: $Utils.Optional<Game_usersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AnswersCountOutputType
   */

  export type AnswersCountOutputType = {
    user_responses: number
  }

  export type AnswersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_responses?: boolean | AnswersCountOutputTypeCountUser_responsesArgs
  }

  // Custom InputTypes
  /**
   * AnswersCountOutputType without action
   */
  export type AnswersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswersCountOutputType
     */
    select?: AnswersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnswersCountOutputType without action
   */
  export type AnswersCountOutputTypeCountUser_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_responsesWhereInput
  }


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    questions: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | CategoriesCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
  }


  /**
   * Count Type QuestionsCountOutputType
   */

  export type QuestionsCountOutputType = {
    answers: number
    user_responses: number
  }

  export type QuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | QuestionsCountOutputTypeCountAnswersArgs
    user_responses?: boolean | QuestionsCountOutputTypeCountUser_responsesArgs
  }

  // Custom InputTypes
  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     */
    select?: QuestionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: answersWhereInput
  }

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountUser_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_responsesWhereInput
  }


  /**
   * Count Type Game_usersCountOutputType
   */

  export type Game_usersCountOutputType = {
    user_responses: number
  }

  export type Game_usersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_responses?: boolean | Game_usersCountOutputTypeCountUser_responsesArgs
  }

  // Custom InputTypes
  /**
   * Game_usersCountOutputType without action
   */
  export type Game_usersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_usersCountOutputType
     */
    select?: Game_usersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Game_usersCountOutputType without action
   */
  export type Game_usersCountOutputTypeCountUser_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_responsesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model answers
   */

  export type AggregateAnswers = {
    _count: AnswersCountAggregateOutputType | null
    _avg: AnswersAvgAggregateOutputType | null
    _sum: AnswersSumAggregateOutputType | null
    _min: AnswersMinAggregateOutputType | null
    _max: AnswersMaxAggregateOutputType | null
  }

  export type AnswersAvgAggregateOutputType = {
    id: number | null
    question_id: number | null
  }

  export type AnswersSumAggregateOutputType = {
    id: number | null
    question_id: number | null
  }

  export type AnswersMinAggregateOutputType = {
    id: number | null
    question_id: number | null
    answer_text: string | null
  }

  export type AnswersMaxAggregateOutputType = {
    id: number | null
    question_id: number | null
    answer_text: string | null
  }

  export type AnswersCountAggregateOutputType = {
    id: number
    question_id: number
    answer_text: number
    _all: number
  }


  export type AnswersAvgAggregateInputType = {
    id?: true
    question_id?: true
  }

  export type AnswersSumAggregateInputType = {
    id?: true
    question_id?: true
  }

  export type AnswersMinAggregateInputType = {
    id?: true
    question_id?: true
    answer_text?: true
  }

  export type AnswersMaxAggregateInputType = {
    id?: true
    question_id?: true
    answer_text?: true
  }

  export type AnswersCountAggregateInputType = {
    id?: true
    question_id?: true
    answer_text?: true
    _all?: true
  }

  export type AnswersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which answers to aggregate.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned answers
    **/
    _count?: true | AnswersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnswersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnswersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswersMaxAggregateInputType
  }

  export type GetAnswersAggregateType<T extends AnswersAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswers[P]>
      : GetScalarType<T[P], AggregateAnswers[P]>
  }




  export type answersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: answersWhereInput
    orderBy?: answersOrderByWithAggregationInput | answersOrderByWithAggregationInput[]
    by: AnswersScalarFieldEnum[] | AnswersScalarFieldEnum
    having?: answersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswersCountAggregateInputType | true
    _avg?: AnswersAvgAggregateInputType
    _sum?: AnswersSumAggregateInputType
    _min?: AnswersMinAggregateInputType
    _max?: AnswersMaxAggregateInputType
  }

  export type AnswersGroupByOutputType = {
    id: number
    question_id: number | null
    answer_text: string
    _count: AnswersCountAggregateOutputType | null
    _avg: AnswersAvgAggregateOutputType | null
    _sum: AnswersSumAggregateOutputType | null
    _min: AnswersMinAggregateOutputType | null
    _max: AnswersMaxAggregateOutputType | null
  }

  type GetAnswersGroupByPayload<T extends answersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnswersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswersGroupByOutputType[P]>
            : GetScalarType<T[P], AnswersGroupByOutputType[P]>
        }
      >
    >


  export type answersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    answer_text?: boolean
    questions?: boolean | answers$questionsArgs<ExtArgs>
    user_responses?: boolean | answers$user_responsesArgs<ExtArgs>
    _count?: boolean | AnswersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answers"]>


  export type answersSelectScalar = {
    id?: boolean
    question_id?: boolean
    answer_text?: boolean
  }

  export type answersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | answers$questionsArgs<ExtArgs>
    user_responses?: boolean | answers$user_responsesArgs<ExtArgs>
    _count?: boolean | AnswersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $answersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "answers"
    objects: {
      questions: Prisma.$questionsPayload<ExtArgs> | null
      user_responses: Prisma.$user_responsesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question_id: number | null
      answer_text: string
    }, ExtArgs["result"]["answers"]>
    composites: {}
  }

  type answersGetPayload<S extends boolean | null | undefined | answersDefaultArgs> = $Result.GetResult<Prisma.$answersPayload, S>

  type answersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<answersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnswersCountAggregateInputType | true
    }

  export interface answersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['answers'], meta: { name: 'answers' } }
    /**
     * Find zero or one Answers that matches the filter.
     * @param {answersFindUniqueArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends answersFindUniqueArgs>(args: SelectSubset<T, answersFindUniqueArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Answers that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {answersFindUniqueOrThrowArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends answersFindUniqueOrThrowArgs>(args: SelectSubset<T, answersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersFindFirstArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends answersFindFirstArgs>(args?: SelectSubset<T, answersFindFirstArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Answers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersFindFirstOrThrowArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends answersFindFirstOrThrowArgs>(args?: SelectSubset<T, answersFindFirstOrThrowArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answers.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const answersWithIdOnly = await prisma.answers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends answersFindManyArgs>(args?: SelectSubset<T, answersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Answers.
     * @param {answersCreateArgs} args - Arguments to create a Answers.
     * @example
     * // Create one Answers
     * const Answers = await prisma.answers.create({
     *   data: {
     *     // ... data to create a Answers
     *   }
     * })
     * 
     */
    create<T extends answersCreateArgs>(args: SelectSubset<T, answersCreateArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Answers.
     * @param {answersCreateManyArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answers = await prisma.answers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends answersCreateManyArgs>(args?: SelectSubset<T, answersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Answers.
     * @param {answersDeleteArgs} args - Arguments to delete one Answers.
     * @example
     * // Delete one Answers
     * const Answers = await prisma.answers.delete({
     *   where: {
     *     // ... filter to delete one Answers
     *   }
     * })
     * 
     */
    delete<T extends answersDeleteArgs>(args: SelectSubset<T, answersDeleteArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Answers.
     * @param {answersUpdateArgs} args - Arguments to update one Answers.
     * @example
     * // Update one Answers
     * const answers = await prisma.answers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends answersUpdateArgs>(args: SelectSubset<T, answersUpdateArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Answers.
     * @param {answersDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends answersDeleteManyArgs>(args?: SelectSubset<T, answersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answers = await prisma.answers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends answersUpdateManyArgs>(args: SelectSubset<T, answersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Answers.
     * @param {answersUpsertArgs} args - Arguments to update or create a Answers.
     * @example
     * // Update or create a Answers
     * const answers = await prisma.answers.upsert({
     *   create: {
     *     // ... data to create a Answers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answers we want to update
     *   }
     * })
     */
    upsert<T extends answersUpsertArgs>(args: SelectSubset<T, answersUpsertArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersCountArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answers.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count<T extends answersCountArgs>(
      args?: Subset<T, answersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswersAggregateArgs>(args: Subset<T, AnswersAggregateArgs>): Prisma.PrismaPromise<GetAnswersAggregateType<T>>

    /**
     * Group by Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends answersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: answersGroupByArgs['orderBy'] }
        : { orderBy?: answersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, answersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the answers model
   */
  readonly fields: answersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for answers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__answersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends answers$questionsArgs<ExtArgs> = {}>(args?: Subset<T, answers$questionsArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user_responses<T extends answers$user_responsesArgs<ExtArgs> = {}>(args?: Subset<T, answers$user_responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the answers model
   */ 
  interface answersFieldRefs {
    readonly id: FieldRef<"answers", 'Int'>
    readonly question_id: FieldRef<"answers", 'Int'>
    readonly answer_text: FieldRef<"answers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * answers findUnique
   */
  export type answersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers findUniqueOrThrow
   */
  export type answersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers findFirst
   */
  export type answersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of answers.
     */
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * answers findFirstOrThrow
   */
  export type answersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of answers.
     */
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * answers findMany
   */
  export type answersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing answers.
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * answers create
   */
  export type answersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * The data needed to create a answers.
     */
    data: XOR<answersCreateInput, answersUncheckedCreateInput>
  }

  /**
   * answers createMany
   */
  export type answersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many answers.
     */
    data: answersCreateManyInput | answersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * answers update
   */
  export type answersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * The data needed to update a answers.
     */
    data: XOR<answersUpdateInput, answersUncheckedUpdateInput>
    /**
     * Choose, which answers to update.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers updateMany
   */
  export type answersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update answers.
     */
    data: XOR<answersUpdateManyMutationInput, answersUncheckedUpdateManyInput>
    /**
     * Filter which answers to update
     */
    where?: answersWhereInput
  }

  /**
   * answers upsert
   */
  export type answersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * The filter to search for the answers to update in case it exists.
     */
    where: answersWhereUniqueInput
    /**
     * In case the answers found by the `where` argument doesn't exist, create a new answers with this data.
     */
    create: XOR<answersCreateInput, answersUncheckedCreateInput>
    /**
     * In case the answers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<answersUpdateInput, answersUncheckedUpdateInput>
  }

  /**
   * answers delete
   */
  export type answersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter which answers to delete.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers deleteMany
   */
  export type answersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which answers to delete
     */
    where?: answersWhereInput
  }

  /**
   * answers.questions
   */
  export type answers$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    where?: questionsWhereInput
  }

  /**
   * answers.user_responses
   */
  export type answers$user_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    where?: user_responsesWhereInput
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    cursor?: user_responsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }

  /**
   * answers without action
   */
  export type answersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
  }


  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    questions?: boolean | categories$questionsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>


  export type categoriesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | categories$questionsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      questions: Prisma.$questionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }

  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoriesFindUniqueArgs>(args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs>(args: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoriesFindFirstArgs>(args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs>(args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoriesFindManyArgs>(args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
     */
    create<T extends categoriesCreateArgs>(args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categories = await prisma.categories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoriesCreateManyArgs>(args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
     */
    delete<T extends categoriesDeleteArgs>(args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoriesUpdateArgs>(args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoriesDeleteManyArgs>(args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoriesUpdateManyArgs>(args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
     */
    upsert<T extends categoriesUpsertArgs>(args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends categories$questionsArgs<ExtArgs> = {}>(args?: Subset<T, categories$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the categories model
   */ 
  interface categoriesFieldRefs {
    readonly id: FieldRef<"categories", 'Int'>
    readonly name: FieldRef<"categories", 'String'>
  }
    

  // Custom InputTypes
  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }

  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }

  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }

  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }

  /**
   * categories.questions
   */
  export type categories$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    cursor?: questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
  }


  /**
   * Model questions
   */

  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    id: number | null
    category_id: number | null
    correct_answer_id: number | null
  }

  export type QuestionsSumAggregateOutputType = {
    id: number | null
    category_id: number | null
    correct_answer_id: number | null
  }

  export type QuestionsMinAggregateOutputType = {
    id: number | null
    category_id: number | null
    question_text: string | null
    difficulty_level: $Enums.questions_difficulty_level | null
    correct_answer_id: number | null
  }

  export type QuestionsMaxAggregateOutputType = {
    id: number | null
    category_id: number | null
    question_text: string | null
    difficulty_level: $Enums.questions_difficulty_level | null
    correct_answer_id: number | null
  }

  export type QuestionsCountAggregateOutputType = {
    id: number
    category_id: number
    question_text: number
    difficulty_level: number
    correct_answer_id: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    id?: true
    category_id?: true
    correct_answer_id?: true
  }

  export type QuestionsSumAggregateInputType = {
    id?: true
    category_id?: true
    correct_answer_id?: true
  }

  export type QuestionsMinAggregateInputType = {
    id?: true
    category_id?: true
    question_text?: true
    difficulty_level?: true
    correct_answer_id?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id?: true
    category_id?: true
    question_text?: true
    difficulty_level?: true
    correct_answer_id?: true
  }

  export type QuestionsCountAggregateInputType = {
    id?: true
    category_id?: true
    question_text?: true
    difficulty_level?: true
    correct_answer_id?: true
    _all?: true
  }

  export type QuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to aggregate.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type questionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithAggregationInput | questionsOrderByWithAggregationInput[]
    by: QuestionsScalarFieldEnum[] | QuestionsScalarFieldEnum
    having?: questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _avg?: QuestionsAvgAggregateInputType
    _sum?: QuestionsSumAggregateInputType
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }

  export type QuestionsGroupByOutputType = {
    id: number
    category_id: number | null
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id: number | null
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends questionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type questionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category_id?: boolean
    question_text?: boolean
    difficulty_level?: boolean
    correct_answer_id?: boolean
    answers?: boolean | questions$answersArgs<ExtArgs>
    categories?: boolean | questions$categoriesArgs<ExtArgs>
    user_responses?: boolean | questions$user_responsesArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>


  export type questionsSelectScalar = {
    id?: boolean
    category_id?: boolean
    question_text?: boolean
    difficulty_level?: boolean
    correct_answer_id?: boolean
  }

  export type questionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | questions$answersArgs<ExtArgs>
    categories?: boolean | questions$categoriesArgs<ExtArgs>
    user_responses?: boolean | questions$user_responsesArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $questionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "questions"
    objects: {
      answers: Prisma.$answersPayload<ExtArgs>[]
      categories: Prisma.$categoriesPayload<ExtArgs> | null
      user_responses: Prisma.$user_responsesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category_id: number | null
      question_text: string
      difficulty_level: $Enums.questions_difficulty_level
      correct_answer_id: number | null
    }, ExtArgs["result"]["questions"]>
    composites: {}
  }

  type questionsGetPayload<S extends boolean | null | undefined | questionsDefaultArgs> = $Result.GetResult<Prisma.$questionsPayload, S>

  type questionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<questionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface questionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['questions'], meta: { name: 'questions' } }
    /**
     * Find zero or one Questions that matches the filter.
     * @param {questionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends questionsFindUniqueArgs>(args: SelectSubset<T, questionsFindUniqueArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Questions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {questionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends questionsFindUniqueOrThrowArgs>(args: SelectSubset<T, questionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends questionsFindFirstArgs>(args?: SelectSubset<T, questionsFindFirstArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends questionsFindFirstOrThrowArgs>(args?: SelectSubset<T, questionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends questionsFindManyArgs>(args?: SelectSubset<T, questionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Questions.
     * @param {questionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
     */
    create<T extends questionsCreateArgs>(args: SelectSubset<T, questionsCreateArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {questionsCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const questions = await prisma.questions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends questionsCreateManyArgs>(args?: SelectSubset<T, questionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questions.
     * @param {questionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
     */
    delete<T extends questionsDeleteArgs>(args: SelectSubset<T, questionsDeleteArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Questions.
     * @param {questionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends questionsUpdateArgs>(args: SelectSubset<T, questionsUpdateArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {questionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends questionsDeleteManyArgs>(args?: SelectSubset<T, questionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends questionsUpdateManyArgs>(args: SelectSubset<T, questionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {questionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
     */
    upsert<T extends questionsUpsertArgs>(args: SelectSubset<T, questionsUpsertArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionsCountArgs>(
      args?: Subset<T, questionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionsGroupByArgs['orderBy'] }
        : { orderBy?: questionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the questions model
   */
  readonly fields: questionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    answers<T extends questions$answersArgs<ExtArgs> = {}>(args?: Subset<T, questions$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findMany"> | Null>
    categories<T extends questions$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, questions$categoriesArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user_responses<T extends questions$user_responsesArgs<ExtArgs> = {}>(args?: Subset<T, questions$user_responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the questions model
   */ 
  interface questionsFieldRefs {
    readonly id: FieldRef<"questions", 'Int'>
    readonly category_id: FieldRef<"questions", 'Int'>
    readonly question_text: FieldRef<"questions", 'String'>
    readonly difficulty_level: FieldRef<"questions", 'questions_difficulty_level'>
    readonly correct_answer_id: FieldRef<"questions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * questions findUnique
   */
  export type questionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions findUniqueOrThrow
   */
  export type questionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions findFirst
   */
  export type questionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions findFirstOrThrow
   */
  export type questionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions findMany
   */
  export type questionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions create
   */
  export type questionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to create a questions.
     */
    data: XOR<questionsCreateInput, questionsUncheckedCreateInput>
  }

  /**
   * questions createMany
   */
  export type questionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionsCreateManyInput | questionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * questions update
   */
  export type questionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to update a questions.
     */
    data: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
    /**
     * Choose, which questions to update.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions updateMany
   */
  export type questionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionsWhereInput
  }

  /**
   * questions upsert
   */
  export type questionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The filter to search for the questions to update in case it exists.
     */
    where: questionsWhereUniqueInput
    /**
     * In case the questions found by the `where` argument doesn't exist, create a new questions with this data.
     */
    create: XOR<questionsCreateInput, questionsUncheckedCreateInput>
    /**
     * In case the questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
  }

  /**
   * questions delete
   */
  export type questionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter which questions to delete.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions deleteMany
   */
  export type questionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionsWhereInput
  }

  /**
   * questions.answers
   */
  export type questions$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    where?: answersWhereInput
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    cursor?: answersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * questions.categories
   */
  export type questions$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    where?: categoriesWhereInput
  }

  /**
   * questions.user_responses
   */
  export type questions$user_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    where?: user_responsesWhereInput
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    cursor?: user_responsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }

  /**
   * questions without action
   */
  export type questionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
  }


  /**
   * Model user_responses
   */

  export type AggregateUser_responses = {
    _count: User_responsesCountAggregateOutputType | null
    _avg: User_responsesAvgAggregateOutputType | null
    _sum: User_responsesSumAggregateOutputType | null
    _min: User_responsesMinAggregateOutputType | null
    _max: User_responsesMaxAggregateOutputType | null
  }

  export type User_responsesAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    question_id: number | null
    answer_id: number | null
  }

  export type User_responsesSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    question_id: number | null
    answer_id: number | null
  }

  export type User_responsesMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    question_id: number | null
    answer_id: number | null
    is_correct: boolean | null
  }

  export type User_responsesMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    question_id: number | null
    answer_id: number | null
    is_correct: boolean | null
  }

  export type User_responsesCountAggregateOutputType = {
    id: number
    user_id: number
    question_id: number
    answer_id: number
    is_correct: number
    _all: number
  }


  export type User_responsesAvgAggregateInputType = {
    id?: true
    user_id?: true
    question_id?: true
    answer_id?: true
  }

  export type User_responsesSumAggregateInputType = {
    id?: true
    user_id?: true
    question_id?: true
    answer_id?: true
  }

  export type User_responsesMinAggregateInputType = {
    id?: true
    user_id?: true
    question_id?: true
    answer_id?: true
    is_correct?: true
  }

  export type User_responsesMaxAggregateInputType = {
    id?: true
    user_id?: true
    question_id?: true
    answer_id?: true
    is_correct?: true
  }

  export type User_responsesCountAggregateInputType = {
    id?: true
    user_id?: true
    question_id?: true
    answer_id?: true
    is_correct?: true
    _all?: true
  }

  export type User_responsesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_responses to aggregate.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_responses
    **/
    _count?: true | User_responsesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_responsesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_responsesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_responsesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_responsesMaxAggregateInputType
  }

  export type GetUser_responsesAggregateType<T extends User_responsesAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_responses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_responses[P]>
      : GetScalarType<T[P], AggregateUser_responses[P]>
  }




  export type user_responsesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_responsesWhereInput
    orderBy?: user_responsesOrderByWithAggregationInput | user_responsesOrderByWithAggregationInput[]
    by: User_responsesScalarFieldEnum[] | User_responsesScalarFieldEnum
    having?: user_responsesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_responsesCountAggregateInputType | true
    _avg?: User_responsesAvgAggregateInputType
    _sum?: User_responsesSumAggregateInputType
    _min?: User_responsesMinAggregateInputType
    _max?: User_responsesMaxAggregateInputType
  }

  export type User_responsesGroupByOutputType = {
    id: number
    user_id: number | null
    question_id: number | null
    answer_id: number | null
    is_correct: boolean | null
    _count: User_responsesCountAggregateOutputType | null
    _avg: User_responsesAvgAggregateOutputType | null
    _sum: User_responsesSumAggregateOutputType | null
    _min: User_responsesMinAggregateOutputType | null
    _max: User_responsesMaxAggregateOutputType | null
  }

  type GetUser_responsesGroupByPayload<T extends user_responsesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_responsesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_responsesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_responsesGroupByOutputType[P]>
            : GetScalarType<T[P], User_responsesGroupByOutputType[P]>
        }
      >
    >


  export type user_responsesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    question_id?: boolean
    answer_id?: boolean
    is_correct?: boolean
    users?: boolean | user_responses$usersArgs<ExtArgs>
    questions?: boolean | user_responses$questionsArgs<ExtArgs>
    answers?: boolean | user_responses$answersArgs<ExtArgs>
  }, ExtArgs["result"]["user_responses"]>


  export type user_responsesSelectScalar = {
    id?: boolean
    user_id?: boolean
    question_id?: boolean
    answer_id?: boolean
    is_correct?: boolean
  }

  export type user_responsesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | user_responses$usersArgs<ExtArgs>
    questions?: boolean | user_responses$questionsArgs<ExtArgs>
    answers?: boolean | user_responses$answersArgs<ExtArgs>
  }

  export type $user_responsesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_responses"
    objects: {
      users: Prisma.$game_usersPayload<ExtArgs> | null
      questions: Prisma.$questionsPayload<ExtArgs> | null
      answers: Prisma.$answersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number | null
      question_id: number | null
      answer_id: number | null
      is_correct: boolean | null
    }, ExtArgs["result"]["user_responses"]>
    composites: {}
  }

  type user_responsesGetPayload<S extends boolean | null | undefined | user_responsesDefaultArgs> = $Result.GetResult<Prisma.$user_responsesPayload, S>

  type user_responsesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_responsesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_responsesCountAggregateInputType | true
    }

  export interface user_responsesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_responses'], meta: { name: 'user_responses' } }
    /**
     * Find zero or one User_responses that matches the filter.
     * @param {user_responsesFindUniqueArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_responsesFindUniqueArgs>(args: SelectSubset<T, user_responsesFindUniqueArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User_responses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_responsesFindUniqueOrThrowArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_responsesFindUniqueOrThrowArgs>(args: SelectSubset<T, user_responsesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User_responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesFindFirstArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_responsesFindFirstArgs>(args?: SelectSubset<T, user_responsesFindFirstArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User_responses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesFindFirstOrThrowArgs} args - Arguments to find a User_responses
     * @example
     * // Get one User_responses
     * const user_responses = await prisma.user_responses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_responsesFindFirstOrThrowArgs>(args?: SelectSubset<T, user_responsesFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more User_responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_responses
     * const user_responses = await prisma.user_responses.findMany()
     * 
     * // Get first 10 User_responses
     * const user_responses = await prisma.user_responses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_responsesWithIdOnly = await prisma.user_responses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_responsesFindManyArgs>(args?: SelectSubset<T, user_responsesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User_responses.
     * @param {user_responsesCreateArgs} args - Arguments to create a User_responses.
     * @example
     * // Create one User_responses
     * const User_responses = await prisma.user_responses.create({
     *   data: {
     *     // ... data to create a User_responses
     *   }
     * })
     * 
     */
    create<T extends user_responsesCreateArgs>(args: SelectSubset<T, user_responsesCreateArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many User_responses.
     * @param {user_responsesCreateManyArgs} args - Arguments to create many User_responses.
     * @example
     * // Create many User_responses
     * const user_responses = await prisma.user_responses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_responsesCreateManyArgs>(args?: SelectSubset<T, user_responsesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_responses.
     * @param {user_responsesDeleteArgs} args - Arguments to delete one User_responses.
     * @example
     * // Delete one User_responses
     * const User_responses = await prisma.user_responses.delete({
     *   where: {
     *     // ... filter to delete one User_responses
     *   }
     * })
     * 
     */
    delete<T extends user_responsesDeleteArgs>(args: SelectSubset<T, user_responsesDeleteArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User_responses.
     * @param {user_responsesUpdateArgs} args - Arguments to update one User_responses.
     * @example
     * // Update one User_responses
     * const user_responses = await prisma.user_responses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_responsesUpdateArgs>(args: SelectSubset<T, user_responsesUpdateArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more User_responses.
     * @param {user_responsesDeleteManyArgs} args - Arguments to filter User_responses to delete.
     * @example
     * // Delete a few User_responses
     * const { count } = await prisma.user_responses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_responsesDeleteManyArgs>(args?: SelectSubset<T, user_responsesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_responses
     * const user_responses = await prisma.user_responses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_responsesUpdateManyArgs>(args: SelectSubset<T, user_responsesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_responses.
     * @param {user_responsesUpsertArgs} args - Arguments to update or create a User_responses.
     * @example
     * // Update or create a User_responses
     * const user_responses = await prisma.user_responses.upsert({
     *   create: {
     *     // ... data to create a User_responses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_responses we want to update
     *   }
     * })
     */
    upsert<T extends user_responsesUpsertArgs>(args: SelectSubset<T, user_responsesUpsertArgs<ExtArgs>>): Prisma__user_responsesClient<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesCountArgs} args - Arguments to filter User_responses to count.
     * @example
     * // Count the number of User_responses
     * const count = await prisma.user_responses.count({
     *   where: {
     *     // ... the filter for the User_responses we want to count
     *   }
     * })
    **/
    count<T extends user_responsesCountArgs>(
      args?: Subset<T, user_responsesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_responsesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_responsesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_responsesAggregateArgs>(args: Subset<T, User_responsesAggregateArgs>): Prisma.PrismaPromise<GetUser_responsesAggregateType<T>>

    /**
     * Group by User_responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_responsesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_responsesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_responsesGroupByArgs['orderBy'] }
        : { orderBy?: user_responsesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_responsesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_responsesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_responses model
   */
  readonly fields: user_responsesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_responses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_responsesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends user_responses$usersArgs<ExtArgs> = {}>(args?: Subset<T, user_responses$usersArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    questions<T extends user_responses$questionsArgs<ExtArgs> = {}>(args?: Subset<T, user_responses$questionsArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    answers<T extends user_responses$answersArgs<ExtArgs> = {}>(args?: Subset<T, user_responses$answersArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_responses model
   */ 
  interface user_responsesFieldRefs {
    readonly id: FieldRef<"user_responses", 'Int'>
    readonly user_id: FieldRef<"user_responses", 'Int'>
    readonly question_id: FieldRef<"user_responses", 'Int'>
    readonly answer_id: FieldRef<"user_responses", 'Int'>
    readonly is_correct: FieldRef<"user_responses", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * user_responses findUnique
   */
  export type user_responsesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where: user_responsesWhereUniqueInput
  }

  /**
   * user_responses findUniqueOrThrow
   */
  export type user_responsesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where: user_responsesWhereUniqueInput
  }

  /**
   * user_responses findFirst
   */
  export type user_responsesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_responses.
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_responses.
     */
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }

  /**
   * user_responses findFirstOrThrow
   */
  export type user_responsesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_responses.
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_responses.
     */
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }

  /**
   * user_responses findMany
   */
  export type user_responsesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter, which user_responses to fetch.
     */
    where?: user_responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_responses to fetch.
     */
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_responses.
     */
    cursor?: user_responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_responses.
     */
    skip?: number
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }

  /**
   * user_responses create
   */
  export type user_responsesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * The data needed to create a user_responses.
     */
    data?: XOR<user_responsesCreateInput, user_responsesUncheckedCreateInput>
  }

  /**
   * user_responses createMany
   */
  export type user_responsesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_responses.
     */
    data: user_responsesCreateManyInput | user_responsesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_responses update
   */
  export type user_responsesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * The data needed to update a user_responses.
     */
    data: XOR<user_responsesUpdateInput, user_responsesUncheckedUpdateInput>
    /**
     * Choose, which user_responses to update.
     */
    where: user_responsesWhereUniqueInput
  }

  /**
   * user_responses updateMany
   */
  export type user_responsesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_responses.
     */
    data: XOR<user_responsesUpdateManyMutationInput, user_responsesUncheckedUpdateManyInput>
    /**
     * Filter which user_responses to update
     */
    where?: user_responsesWhereInput
  }

  /**
   * user_responses upsert
   */
  export type user_responsesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * The filter to search for the user_responses to update in case it exists.
     */
    where: user_responsesWhereUniqueInput
    /**
     * In case the user_responses found by the `where` argument doesn't exist, create a new user_responses with this data.
     */
    create: XOR<user_responsesCreateInput, user_responsesUncheckedCreateInput>
    /**
     * In case the user_responses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_responsesUpdateInput, user_responsesUncheckedUpdateInput>
  }

  /**
   * user_responses delete
   */
  export type user_responsesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    /**
     * Filter which user_responses to delete.
     */
    where: user_responsesWhereUniqueInput
  }

  /**
   * user_responses deleteMany
   */
  export type user_responsesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_responses to delete
     */
    where?: user_responsesWhereInput
  }

  /**
   * user_responses.users
   */
  export type user_responses$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    where?: game_usersWhereInput
  }

  /**
   * user_responses.questions
   */
  export type user_responses$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    where?: questionsWhereInput
  }

  /**
   * user_responses.answers
   */
  export type user_responses$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    where?: answersWhereInput
  }

  /**
   * user_responses without action
   */
  export type user_responsesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
  }


  /**
   * Model room_tbl
   */

  export type AggregateRoom_tbl = {
    _count: Room_tblCountAggregateOutputType | null
    _avg: Room_tblAvgAggregateOutputType | null
    _sum: Room_tblSumAggregateOutputType | null
    _min: Room_tblMinAggregateOutputType | null
    _max: Room_tblMaxAggregateOutputType | null
  }

  export type Room_tblAvgAggregateOutputType = {
    id: number | null
    busy: number | null
  }

  export type Room_tblSumAggregateOutputType = {
    id: number | null
    busy: number | null
  }

  export type Room_tblMinAggregateOutputType = {
    id: number | null
    busy: number | null
  }

  export type Room_tblMaxAggregateOutputType = {
    id: number | null
    busy: number | null
  }

  export type Room_tblCountAggregateOutputType = {
    id: number
    busy: number
    _all: number
  }


  export type Room_tblAvgAggregateInputType = {
    id?: true
    busy?: true
  }

  export type Room_tblSumAggregateInputType = {
    id?: true
    busy?: true
  }

  export type Room_tblMinAggregateInputType = {
    id?: true
    busy?: true
  }

  export type Room_tblMaxAggregateInputType = {
    id?: true
    busy?: true
  }

  export type Room_tblCountAggregateInputType = {
    id?: true
    busy?: true
    _all?: true
  }

  export type Room_tblAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which room_tbl to aggregate.
     */
    where?: room_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_tbls to fetch.
     */
    orderBy?: room_tblOrderByWithRelationInput | room_tblOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: room_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_tbls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_tbls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned room_tbls
    **/
    _count?: true | Room_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Room_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Room_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Room_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Room_tblMaxAggregateInputType
  }

  export type GetRoom_tblAggregateType<T extends Room_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom_tbl[P]>
      : GetScalarType<T[P], AggregateRoom_tbl[P]>
  }




  export type room_tblGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: room_tblWhereInput
    orderBy?: room_tblOrderByWithAggregationInput | room_tblOrderByWithAggregationInput[]
    by: Room_tblScalarFieldEnum[] | Room_tblScalarFieldEnum
    having?: room_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Room_tblCountAggregateInputType | true
    _avg?: Room_tblAvgAggregateInputType
    _sum?: Room_tblSumAggregateInputType
    _min?: Room_tblMinAggregateInputType
    _max?: Room_tblMaxAggregateInputType
  }

  export type Room_tblGroupByOutputType = {
    id: number
    busy: number
    _count: Room_tblCountAggregateOutputType | null
    _avg: Room_tblAvgAggregateOutputType | null
    _sum: Room_tblSumAggregateOutputType | null
    _min: Room_tblMinAggregateOutputType | null
    _max: Room_tblMaxAggregateOutputType | null
  }

  type GetRoom_tblGroupByPayload<T extends room_tblGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Room_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Room_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Room_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Room_tblGroupByOutputType[P]>
        }
      >
    >


  export type room_tblSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    busy?: boolean
  }, ExtArgs["result"]["room_tbl"]>


  export type room_tblSelectScalar = {
    id?: boolean
    busy?: boolean
  }


  export type $room_tblPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "room_tbl"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      busy: number
    }, ExtArgs["result"]["room_tbl"]>
    composites: {}
  }

  type room_tblGetPayload<S extends boolean | null | undefined | room_tblDefaultArgs> = $Result.GetResult<Prisma.$room_tblPayload, S>

  type room_tblCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<room_tblFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Room_tblCountAggregateInputType | true
    }

  export interface room_tblDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['room_tbl'], meta: { name: 'room_tbl' } }
    /**
     * Find zero or one Room_tbl that matches the filter.
     * @param {room_tblFindUniqueArgs} args - Arguments to find a Room_tbl
     * @example
     * // Get one Room_tbl
     * const room_tbl = await prisma.room_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends room_tblFindUniqueArgs>(args: SelectSubset<T, room_tblFindUniqueArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Room_tbl that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {room_tblFindUniqueOrThrowArgs} args - Arguments to find a Room_tbl
     * @example
     * // Get one Room_tbl
     * const room_tbl = await prisma.room_tbl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends room_tblFindUniqueOrThrowArgs>(args: SelectSubset<T, room_tblFindUniqueOrThrowArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Room_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_tblFindFirstArgs} args - Arguments to find a Room_tbl
     * @example
     * // Get one Room_tbl
     * const room_tbl = await prisma.room_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends room_tblFindFirstArgs>(args?: SelectSubset<T, room_tblFindFirstArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Room_tbl that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_tblFindFirstOrThrowArgs} args - Arguments to find a Room_tbl
     * @example
     * // Get one Room_tbl
     * const room_tbl = await prisma.room_tbl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends room_tblFindFirstOrThrowArgs>(args?: SelectSubset<T, room_tblFindFirstOrThrowArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Room_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_tblFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Room_tbls
     * const room_tbls = await prisma.room_tbl.findMany()
     * 
     * // Get first 10 Room_tbls
     * const room_tbls = await prisma.room_tbl.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const room_tblWithIdOnly = await prisma.room_tbl.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends room_tblFindManyArgs>(args?: SelectSubset<T, room_tblFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Room_tbl.
     * @param {room_tblCreateArgs} args - Arguments to create a Room_tbl.
     * @example
     * // Create one Room_tbl
     * const Room_tbl = await prisma.room_tbl.create({
     *   data: {
     *     // ... data to create a Room_tbl
     *   }
     * })
     * 
     */
    create<T extends room_tblCreateArgs>(args: SelectSubset<T, room_tblCreateArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Room_tbls.
     * @param {room_tblCreateManyArgs} args - Arguments to create many Room_tbls.
     * @example
     * // Create many Room_tbls
     * const room_tbl = await prisma.room_tbl.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends room_tblCreateManyArgs>(args?: SelectSubset<T, room_tblCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Room_tbl.
     * @param {room_tblDeleteArgs} args - Arguments to delete one Room_tbl.
     * @example
     * // Delete one Room_tbl
     * const Room_tbl = await prisma.room_tbl.delete({
     *   where: {
     *     // ... filter to delete one Room_tbl
     *   }
     * })
     * 
     */
    delete<T extends room_tblDeleteArgs>(args: SelectSubset<T, room_tblDeleteArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Room_tbl.
     * @param {room_tblUpdateArgs} args - Arguments to update one Room_tbl.
     * @example
     * // Update one Room_tbl
     * const room_tbl = await prisma.room_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends room_tblUpdateArgs>(args: SelectSubset<T, room_tblUpdateArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Room_tbls.
     * @param {room_tblDeleteManyArgs} args - Arguments to filter Room_tbls to delete.
     * @example
     * // Delete a few Room_tbls
     * const { count } = await prisma.room_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends room_tblDeleteManyArgs>(args?: SelectSubset<T, room_tblDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Room_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Room_tbls
     * const room_tbl = await prisma.room_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends room_tblUpdateManyArgs>(args: SelectSubset<T, room_tblUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Room_tbl.
     * @param {room_tblUpsertArgs} args - Arguments to update or create a Room_tbl.
     * @example
     * // Update or create a Room_tbl
     * const room_tbl = await prisma.room_tbl.upsert({
     *   create: {
     *     // ... data to create a Room_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room_tbl we want to update
     *   }
     * })
     */
    upsert<T extends room_tblUpsertArgs>(args: SelectSubset<T, room_tblUpsertArgs<ExtArgs>>): Prisma__room_tblClient<$Result.GetResult<Prisma.$room_tblPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Room_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_tblCountArgs} args - Arguments to filter Room_tbls to count.
     * @example
     * // Count the number of Room_tbls
     * const count = await prisma.room_tbl.count({
     *   where: {
     *     // ... the filter for the Room_tbls we want to count
     *   }
     * })
    **/
    count<T extends room_tblCountArgs>(
      args?: Subset<T, room_tblCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Room_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Room_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Room_tblAggregateArgs>(args: Subset<T, Room_tblAggregateArgs>): Prisma.PrismaPromise<GetRoom_tblAggregateType<T>>

    /**
     * Group by Room_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends room_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: room_tblGroupByArgs['orderBy'] }
        : { orderBy?: room_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, room_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoom_tblGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the room_tbl model
   */
  readonly fields: room_tblFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for room_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__room_tblClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the room_tbl model
   */ 
  interface room_tblFieldRefs {
    readonly id: FieldRef<"room_tbl", 'Int'>
    readonly busy: FieldRef<"room_tbl", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * room_tbl findUnique
   */
  export type room_tblFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * Filter, which room_tbl to fetch.
     */
    where: room_tblWhereUniqueInput
  }

  /**
   * room_tbl findUniqueOrThrow
   */
  export type room_tblFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * Filter, which room_tbl to fetch.
     */
    where: room_tblWhereUniqueInput
  }

  /**
   * room_tbl findFirst
   */
  export type room_tblFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * Filter, which room_tbl to fetch.
     */
    where?: room_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_tbls to fetch.
     */
    orderBy?: room_tblOrderByWithRelationInput | room_tblOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for room_tbls.
     */
    cursor?: room_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_tbls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_tbls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of room_tbls.
     */
    distinct?: Room_tblScalarFieldEnum | Room_tblScalarFieldEnum[]
  }

  /**
   * room_tbl findFirstOrThrow
   */
  export type room_tblFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * Filter, which room_tbl to fetch.
     */
    where?: room_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_tbls to fetch.
     */
    orderBy?: room_tblOrderByWithRelationInput | room_tblOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for room_tbls.
     */
    cursor?: room_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_tbls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_tbls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of room_tbls.
     */
    distinct?: Room_tblScalarFieldEnum | Room_tblScalarFieldEnum[]
  }

  /**
   * room_tbl findMany
   */
  export type room_tblFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * Filter, which room_tbls to fetch.
     */
    where?: room_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_tbls to fetch.
     */
    orderBy?: room_tblOrderByWithRelationInput | room_tblOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing room_tbls.
     */
    cursor?: room_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_tbls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_tbls.
     */
    skip?: number
    distinct?: Room_tblScalarFieldEnum | Room_tblScalarFieldEnum[]
  }

  /**
   * room_tbl create
   */
  export type room_tblCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * The data needed to create a room_tbl.
     */
    data?: XOR<room_tblCreateInput, room_tblUncheckedCreateInput>
  }

  /**
   * room_tbl createMany
   */
  export type room_tblCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many room_tbls.
     */
    data: room_tblCreateManyInput | room_tblCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * room_tbl update
   */
  export type room_tblUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * The data needed to update a room_tbl.
     */
    data: XOR<room_tblUpdateInput, room_tblUncheckedUpdateInput>
    /**
     * Choose, which room_tbl to update.
     */
    where: room_tblWhereUniqueInput
  }

  /**
   * room_tbl updateMany
   */
  export type room_tblUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update room_tbls.
     */
    data: XOR<room_tblUpdateManyMutationInput, room_tblUncheckedUpdateManyInput>
    /**
     * Filter which room_tbls to update
     */
    where?: room_tblWhereInput
  }

  /**
   * room_tbl upsert
   */
  export type room_tblUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * The filter to search for the room_tbl to update in case it exists.
     */
    where: room_tblWhereUniqueInput
    /**
     * In case the room_tbl found by the `where` argument doesn't exist, create a new room_tbl with this data.
     */
    create: XOR<room_tblCreateInput, room_tblUncheckedCreateInput>
    /**
     * In case the room_tbl was found with the provided `where` argument, update it with this data.
     */
    update: XOR<room_tblUpdateInput, room_tblUncheckedUpdateInput>
  }

  /**
   * room_tbl delete
   */
  export type room_tblDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
    /**
     * Filter which room_tbl to delete.
     */
    where: room_tblWhereUniqueInput
  }

  /**
   * room_tbl deleteMany
   */
  export type room_tblDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which room_tbls to delete
     */
    where?: room_tblWhereInput
  }

  /**
   * room_tbl without action
   */
  export type room_tblDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_tbl
     */
    select?: room_tblSelect<ExtArgs> | null
  }


  /**
   * Model game_users
   */

  export type AggregateGame_users = {
    _count: Game_usersCountAggregateOutputType | null
    _avg: Game_usersAvgAggregateOutputType | null
    _sum: Game_usersSumAggregateOutputType | null
    _min: Game_usersMinAggregateOutputType | null
    _max: Game_usersMaxAggregateOutputType | null
  }

  export type Game_usersAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type Game_usersSumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type Game_usersMinAggregateOutputType = {
    id: number | null
    username: string | null
    score: number | null
  }

  export type Game_usersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    score: number | null
  }

  export type Game_usersCountAggregateOutputType = {
    id: number
    username: number
    score: number
    _all: number
  }


  export type Game_usersAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type Game_usersSumAggregateInputType = {
    id?: true
    score?: true
  }

  export type Game_usersMinAggregateInputType = {
    id?: true
    username?: true
    score?: true
  }

  export type Game_usersMaxAggregateInputType = {
    id?: true
    username?: true
    score?: true
  }

  export type Game_usersCountAggregateInputType = {
    id?: true
    username?: true
    score?: true
    _all?: true
  }

  export type Game_usersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_users to aggregate.
     */
    where?: game_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_users to fetch.
     */
    orderBy?: game_usersOrderByWithRelationInput | game_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: game_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned game_users
    **/
    _count?: true | Game_usersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Game_usersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Game_usersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Game_usersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Game_usersMaxAggregateInputType
  }

  export type GetGame_usersAggregateType<T extends Game_usersAggregateArgs> = {
        [P in keyof T & keyof AggregateGame_users]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame_users[P]>
      : GetScalarType<T[P], AggregateGame_users[P]>
  }




  export type game_usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_usersWhereInput
    orderBy?: game_usersOrderByWithAggregationInput | game_usersOrderByWithAggregationInput[]
    by: Game_usersScalarFieldEnum[] | Game_usersScalarFieldEnum
    having?: game_usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Game_usersCountAggregateInputType | true
    _avg?: Game_usersAvgAggregateInputType
    _sum?: Game_usersSumAggregateInputType
    _min?: Game_usersMinAggregateInputType
    _max?: Game_usersMaxAggregateInputType
  }

  export type Game_usersGroupByOutputType = {
    id: number
    username: string
    score: number | null
    _count: Game_usersCountAggregateOutputType | null
    _avg: Game_usersAvgAggregateOutputType | null
    _sum: Game_usersSumAggregateOutputType | null
    _min: Game_usersMinAggregateOutputType | null
    _max: Game_usersMaxAggregateOutputType | null
  }

  type GetGame_usersGroupByPayload<T extends game_usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Game_usersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Game_usersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Game_usersGroupByOutputType[P]>
            : GetScalarType<T[P], Game_usersGroupByOutputType[P]>
        }
      >
    >


  export type game_usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    score?: boolean
    user_responses?: boolean | game_users$user_responsesArgs<ExtArgs>
    _count?: boolean | Game_usersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game_users"]>


  export type game_usersSelectScalar = {
    id?: boolean
    username?: boolean
    score?: boolean
  }

  export type game_usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_responses?: boolean | game_users$user_responsesArgs<ExtArgs>
    _count?: boolean | Game_usersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $game_usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game_users"
    objects: {
      user_responses: Prisma.$user_responsesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      score: number | null
    }, ExtArgs["result"]["game_users"]>
    composites: {}
  }

  type game_usersGetPayload<S extends boolean | null | undefined | game_usersDefaultArgs> = $Result.GetResult<Prisma.$game_usersPayload, S>

  type game_usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<game_usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Game_usersCountAggregateInputType | true
    }

  export interface game_usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game_users'], meta: { name: 'game_users' } }
    /**
     * Find zero or one Game_users that matches the filter.
     * @param {game_usersFindUniqueArgs} args - Arguments to find a Game_users
     * @example
     * // Get one Game_users
     * const game_users = await prisma.game_users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends game_usersFindUniqueArgs>(args: SelectSubset<T, game_usersFindUniqueArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Game_users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {game_usersFindUniqueOrThrowArgs} args - Arguments to find a Game_users
     * @example
     * // Get one Game_users
     * const game_users = await prisma.game_users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends game_usersFindUniqueOrThrowArgs>(args: SelectSubset<T, game_usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Game_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_usersFindFirstArgs} args - Arguments to find a Game_users
     * @example
     * // Get one Game_users
     * const game_users = await prisma.game_users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends game_usersFindFirstArgs>(args?: SelectSubset<T, game_usersFindFirstArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Game_users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_usersFindFirstOrThrowArgs} args - Arguments to find a Game_users
     * @example
     * // Get one Game_users
     * const game_users = await prisma.game_users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends game_usersFindFirstOrThrowArgs>(args?: SelectSubset<T, game_usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Game_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Game_users
     * const game_users = await prisma.game_users.findMany()
     * 
     * // Get first 10 Game_users
     * const game_users = await prisma.game_users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const game_usersWithIdOnly = await prisma.game_users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends game_usersFindManyArgs>(args?: SelectSubset<T, game_usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Game_users.
     * @param {game_usersCreateArgs} args - Arguments to create a Game_users.
     * @example
     * // Create one Game_users
     * const Game_users = await prisma.game_users.create({
     *   data: {
     *     // ... data to create a Game_users
     *   }
     * })
     * 
     */
    create<T extends game_usersCreateArgs>(args: SelectSubset<T, game_usersCreateArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Game_users.
     * @param {game_usersCreateManyArgs} args - Arguments to create many Game_users.
     * @example
     * // Create many Game_users
     * const game_users = await prisma.game_users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends game_usersCreateManyArgs>(args?: SelectSubset<T, game_usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game_users.
     * @param {game_usersDeleteArgs} args - Arguments to delete one Game_users.
     * @example
     * // Delete one Game_users
     * const Game_users = await prisma.game_users.delete({
     *   where: {
     *     // ... filter to delete one Game_users
     *   }
     * })
     * 
     */
    delete<T extends game_usersDeleteArgs>(args: SelectSubset<T, game_usersDeleteArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Game_users.
     * @param {game_usersUpdateArgs} args - Arguments to update one Game_users.
     * @example
     * // Update one Game_users
     * const game_users = await prisma.game_users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends game_usersUpdateArgs>(args: SelectSubset<T, game_usersUpdateArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Game_users.
     * @param {game_usersDeleteManyArgs} args - Arguments to filter Game_users to delete.
     * @example
     * // Delete a few Game_users
     * const { count } = await prisma.game_users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends game_usersDeleteManyArgs>(args?: SelectSubset<T, game_usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Game_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Game_users
     * const game_users = await prisma.game_users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends game_usersUpdateManyArgs>(args: SelectSubset<T, game_usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game_users.
     * @param {game_usersUpsertArgs} args - Arguments to update or create a Game_users.
     * @example
     * // Update or create a Game_users
     * const game_users = await prisma.game_users.upsert({
     *   create: {
     *     // ... data to create a Game_users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game_users we want to update
     *   }
     * })
     */
    upsert<T extends game_usersUpsertArgs>(args: SelectSubset<T, game_usersUpsertArgs<ExtArgs>>): Prisma__game_usersClient<$Result.GetResult<Prisma.$game_usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Game_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_usersCountArgs} args - Arguments to filter Game_users to count.
     * @example
     * // Count the number of Game_users
     * const count = await prisma.game_users.count({
     *   where: {
     *     // ... the filter for the Game_users we want to count
     *   }
     * })
    **/
    count<T extends game_usersCountArgs>(
      args?: Subset<T, game_usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Game_usersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Game_usersAggregateArgs>(args: Subset<T, Game_usersAggregateArgs>): Prisma.PrismaPromise<GetGame_usersAggregateType<T>>

    /**
     * Group by Game_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends game_usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: game_usersGroupByArgs['orderBy'] }
        : { orderBy?: game_usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, game_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_usersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game_users model
   */
  readonly fields: game_usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game_users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__game_usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_responses<T extends game_users$user_responsesArgs<ExtArgs> = {}>(args?: Subset<T, game_users$user_responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_responsesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the game_users model
   */ 
  interface game_usersFieldRefs {
    readonly id: FieldRef<"game_users", 'Int'>
    readonly username: FieldRef<"game_users", 'String'>
    readonly score: FieldRef<"game_users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * game_users findUnique
   */
  export type game_usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * Filter, which game_users to fetch.
     */
    where: game_usersWhereUniqueInput
  }

  /**
   * game_users findUniqueOrThrow
   */
  export type game_usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * Filter, which game_users to fetch.
     */
    where: game_usersWhereUniqueInput
  }

  /**
   * game_users findFirst
   */
  export type game_usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * Filter, which game_users to fetch.
     */
    where?: game_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_users to fetch.
     */
    orderBy?: game_usersOrderByWithRelationInput | game_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_users.
     */
    cursor?: game_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_users.
     */
    distinct?: Game_usersScalarFieldEnum | Game_usersScalarFieldEnum[]
  }

  /**
   * game_users findFirstOrThrow
   */
  export type game_usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * Filter, which game_users to fetch.
     */
    where?: game_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_users to fetch.
     */
    orderBy?: game_usersOrderByWithRelationInput | game_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_users.
     */
    cursor?: game_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_users.
     */
    distinct?: Game_usersScalarFieldEnum | Game_usersScalarFieldEnum[]
  }

  /**
   * game_users findMany
   */
  export type game_usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * Filter, which game_users to fetch.
     */
    where?: game_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_users to fetch.
     */
    orderBy?: game_usersOrderByWithRelationInput | game_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing game_users.
     */
    cursor?: game_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_users.
     */
    skip?: number
    distinct?: Game_usersScalarFieldEnum | Game_usersScalarFieldEnum[]
  }

  /**
   * game_users create
   */
  export type game_usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * The data needed to create a game_users.
     */
    data: XOR<game_usersCreateInput, game_usersUncheckedCreateInput>
  }

  /**
   * game_users createMany
   */
  export type game_usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many game_users.
     */
    data: game_usersCreateManyInput | game_usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * game_users update
   */
  export type game_usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * The data needed to update a game_users.
     */
    data: XOR<game_usersUpdateInput, game_usersUncheckedUpdateInput>
    /**
     * Choose, which game_users to update.
     */
    where: game_usersWhereUniqueInput
  }

  /**
   * game_users updateMany
   */
  export type game_usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update game_users.
     */
    data: XOR<game_usersUpdateManyMutationInput, game_usersUncheckedUpdateManyInput>
    /**
     * Filter which game_users to update
     */
    where?: game_usersWhereInput
  }

  /**
   * game_users upsert
   */
  export type game_usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * The filter to search for the game_users to update in case it exists.
     */
    where: game_usersWhereUniqueInput
    /**
     * In case the game_users found by the `where` argument doesn't exist, create a new game_users with this data.
     */
    create: XOR<game_usersCreateInput, game_usersUncheckedCreateInput>
    /**
     * In case the game_users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<game_usersUpdateInput, game_usersUncheckedUpdateInput>
  }

  /**
   * game_users delete
   */
  export type game_usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
    /**
     * Filter which game_users to delete.
     */
    where: game_usersWhereUniqueInput
  }

  /**
   * game_users deleteMany
   */
  export type game_usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_users to delete
     */
    where?: game_usersWhereInput
  }

  /**
   * game_users.user_responses
   */
  export type game_users$user_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_responses
     */
    select?: user_responsesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_responsesInclude<ExtArgs> | null
    where?: user_responsesWhereInput
    orderBy?: user_responsesOrderByWithRelationInput | user_responsesOrderByWithRelationInput[]
    cursor?: user_responsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_responsesScalarFieldEnum | User_responsesScalarFieldEnum[]
  }

  /**
   * game_users without action
   */
  export type game_usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_users
     */
    select?: game_usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AnswersScalarFieldEnum: {
    id: 'id',
    question_id: 'question_id',
    answer_text: 'answer_text'
  };

  export type AnswersScalarFieldEnum = (typeof AnswersScalarFieldEnum)[keyof typeof AnswersScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    id: 'id',
    category_id: 'category_id',
    question_text: 'question_text',
    difficulty_level: 'difficulty_level',
    correct_answer_id: 'correct_answer_id'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const User_responsesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    question_id: 'question_id',
    answer_id: 'answer_id',
    is_correct: 'is_correct'
  };

  export type User_responsesScalarFieldEnum = (typeof User_responsesScalarFieldEnum)[keyof typeof User_responsesScalarFieldEnum]


  export const Room_tblScalarFieldEnum: {
    id: 'id',
    busy: 'busy'
  };

  export type Room_tblScalarFieldEnum = (typeof Room_tblScalarFieldEnum)[keyof typeof Room_tblScalarFieldEnum]


  export const Game_usersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    score: 'score'
  };

  export type Game_usersScalarFieldEnum = (typeof Game_usersScalarFieldEnum)[keyof typeof Game_usersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'questions_difficulty_level'
   */
  export type Enumquestions_difficulty_levelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'questions_difficulty_level'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type answersWhereInput = {
    AND?: answersWhereInput | answersWhereInput[]
    OR?: answersWhereInput[]
    NOT?: answersWhereInput | answersWhereInput[]
    id?: IntFilter<"answers"> | number
    question_id?: IntNullableFilter<"answers"> | number | null
    answer_text?: StringFilter<"answers"> | string
    questions?: XOR<QuestionsNullableRelationFilter, questionsWhereInput> | null
    user_responses?: User_responsesListRelationFilter
  }

  export type answersOrderByWithRelationInput = {
    id?: SortOrder
    question_id?: SortOrderInput | SortOrder
    answer_text?: SortOrder
    questions?: questionsOrderByWithRelationInput
    user_responses?: user_responsesOrderByRelationAggregateInput
  }

  export type answersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: answersWhereInput | answersWhereInput[]
    OR?: answersWhereInput[]
    NOT?: answersWhereInput | answersWhereInput[]
    question_id?: IntNullableFilter<"answers"> | number | null
    answer_text?: StringFilter<"answers"> | string
    questions?: XOR<QuestionsNullableRelationFilter, questionsWhereInput> | null
    user_responses?: User_responsesListRelationFilter
  }, "id">

  export type answersOrderByWithAggregationInput = {
    id?: SortOrder
    question_id?: SortOrderInput | SortOrder
    answer_text?: SortOrder
    _count?: answersCountOrderByAggregateInput
    _avg?: answersAvgOrderByAggregateInput
    _max?: answersMaxOrderByAggregateInput
    _min?: answersMinOrderByAggregateInput
    _sum?: answersSumOrderByAggregateInput
  }

  export type answersScalarWhereWithAggregatesInput = {
    AND?: answersScalarWhereWithAggregatesInput | answersScalarWhereWithAggregatesInput[]
    OR?: answersScalarWhereWithAggregatesInput[]
    NOT?: answersScalarWhereWithAggregatesInput | answersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"answers"> | number
    question_id?: IntNullableWithAggregatesFilter<"answers"> | number | null
    answer_text?: StringWithAggregatesFilter<"answers"> | string
  }

  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    id?: IntFilter<"categories"> | number
    name?: StringFilter<"categories"> | string
    questions?: QuestionsListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    questions?: questionsOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    name?: StringFilter<"categories"> | string
    questions?: QuestionsListRelationFilter
  }, "id">

  export type categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"categories"> | number
    name?: StringWithAggregatesFilter<"categories"> | string
  }

  export type questionsWhereInput = {
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    id?: IntFilter<"questions"> | number
    category_id?: IntNullableFilter<"questions"> | number | null
    question_text?: StringFilter<"questions"> | string
    difficulty_level?: Enumquestions_difficulty_levelFilter<"questions"> | $Enums.questions_difficulty_level
    correct_answer_id?: IntNullableFilter<"questions"> | number | null
    answers?: AnswersListRelationFilter
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
    user_responses?: User_responsesListRelationFilter
  }

  export type questionsOrderByWithRelationInput = {
    id?: SortOrder
    category_id?: SortOrderInput | SortOrder
    question_text?: SortOrder
    difficulty_level?: SortOrder
    correct_answer_id?: SortOrderInput | SortOrder
    answers?: answersOrderByRelationAggregateInput
    categories?: categoriesOrderByWithRelationInput
    user_responses?: user_responsesOrderByRelationAggregateInput
  }

  export type questionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    category_id?: IntNullableFilter<"questions"> | number | null
    question_text?: StringFilter<"questions"> | string
    difficulty_level?: Enumquestions_difficulty_levelFilter<"questions"> | $Enums.questions_difficulty_level
    correct_answer_id?: IntNullableFilter<"questions"> | number | null
    answers?: AnswersListRelationFilter
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
    user_responses?: User_responsesListRelationFilter
  }, "id">

  export type questionsOrderByWithAggregationInput = {
    id?: SortOrder
    category_id?: SortOrderInput | SortOrder
    question_text?: SortOrder
    difficulty_level?: SortOrder
    correct_answer_id?: SortOrderInput | SortOrder
    _count?: questionsCountOrderByAggregateInput
    _avg?: questionsAvgOrderByAggregateInput
    _max?: questionsMaxOrderByAggregateInput
    _min?: questionsMinOrderByAggregateInput
    _sum?: questionsSumOrderByAggregateInput
  }

  export type questionsScalarWhereWithAggregatesInput = {
    AND?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    OR?: questionsScalarWhereWithAggregatesInput[]
    NOT?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"questions"> | number
    category_id?: IntNullableWithAggregatesFilter<"questions"> | number | null
    question_text?: StringWithAggregatesFilter<"questions"> | string
    difficulty_level?: Enumquestions_difficulty_levelWithAggregatesFilter<"questions"> | $Enums.questions_difficulty_level
    correct_answer_id?: IntNullableWithAggregatesFilter<"questions"> | number | null
  }

  export type user_responsesWhereInput = {
    AND?: user_responsesWhereInput | user_responsesWhereInput[]
    OR?: user_responsesWhereInput[]
    NOT?: user_responsesWhereInput | user_responsesWhereInput[]
    id?: IntFilter<"user_responses"> | number
    user_id?: IntNullableFilter<"user_responses"> | number | null
    question_id?: IntNullableFilter<"user_responses"> | number | null
    answer_id?: IntNullableFilter<"user_responses"> | number | null
    is_correct?: BoolNullableFilter<"user_responses"> | boolean | null
    users?: XOR<Game_usersNullableRelationFilter, game_usersWhereInput> | null
    questions?: XOR<QuestionsNullableRelationFilter, questionsWhereInput> | null
    answers?: XOR<AnswersNullableRelationFilter, answersWhereInput> | null
  }

  export type user_responsesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    question_id?: SortOrderInput | SortOrder
    answer_id?: SortOrderInput | SortOrder
    is_correct?: SortOrderInput | SortOrder
    users?: game_usersOrderByWithRelationInput
    questions?: questionsOrderByWithRelationInput
    answers?: answersOrderByWithRelationInput
  }

  export type user_responsesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_responsesWhereInput | user_responsesWhereInput[]
    OR?: user_responsesWhereInput[]
    NOT?: user_responsesWhereInput | user_responsesWhereInput[]
    user_id?: IntNullableFilter<"user_responses"> | number | null
    question_id?: IntNullableFilter<"user_responses"> | number | null
    answer_id?: IntNullableFilter<"user_responses"> | number | null
    is_correct?: BoolNullableFilter<"user_responses"> | boolean | null
    users?: XOR<Game_usersNullableRelationFilter, game_usersWhereInput> | null
    questions?: XOR<QuestionsNullableRelationFilter, questionsWhereInput> | null
    answers?: XOR<AnswersNullableRelationFilter, answersWhereInput> | null
  }, "id">

  export type user_responsesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    question_id?: SortOrderInput | SortOrder
    answer_id?: SortOrderInput | SortOrder
    is_correct?: SortOrderInput | SortOrder
    _count?: user_responsesCountOrderByAggregateInput
    _avg?: user_responsesAvgOrderByAggregateInput
    _max?: user_responsesMaxOrderByAggregateInput
    _min?: user_responsesMinOrderByAggregateInput
    _sum?: user_responsesSumOrderByAggregateInput
  }

  export type user_responsesScalarWhereWithAggregatesInput = {
    AND?: user_responsesScalarWhereWithAggregatesInput | user_responsesScalarWhereWithAggregatesInput[]
    OR?: user_responsesScalarWhereWithAggregatesInput[]
    NOT?: user_responsesScalarWhereWithAggregatesInput | user_responsesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_responses"> | number
    user_id?: IntNullableWithAggregatesFilter<"user_responses"> | number | null
    question_id?: IntNullableWithAggregatesFilter<"user_responses"> | number | null
    answer_id?: IntNullableWithAggregatesFilter<"user_responses"> | number | null
    is_correct?: BoolNullableWithAggregatesFilter<"user_responses"> | boolean | null
  }

  export type room_tblWhereInput = {
    AND?: room_tblWhereInput | room_tblWhereInput[]
    OR?: room_tblWhereInput[]
    NOT?: room_tblWhereInput | room_tblWhereInput[]
    id?: IntFilter<"room_tbl"> | number
    busy?: IntFilter<"room_tbl"> | number
  }

  export type room_tblOrderByWithRelationInput = {
    id?: SortOrder
    busy?: SortOrder
  }

  export type room_tblWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: room_tblWhereInput | room_tblWhereInput[]
    OR?: room_tblWhereInput[]
    NOT?: room_tblWhereInput | room_tblWhereInput[]
    busy?: IntFilter<"room_tbl"> | number
  }, "id">

  export type room_tblOrderByWithAggregationInput = {
    id?: SortOrder
    busy?: SortOrder
    _count?: room_tblCountOrderByAggregateInput
    _avg?: room_tblAvgOrderByAggregateInput
    _max?: room_tblMaxOrderByAggregateInput
    _min?: room_tblMinOrderByAggregateInput
    _sum?: room_tblSumOrderByAggregateInput
  }

  export type room_tblScalarWhereWithAggregatesInput = {
    AND?: room_tblScalarWhereWithAggregatesInput | room_tblScalarWhereWithAggregatesInput[]
    OR?: room_tblScalarWhereWithAggregatesInput[]
    NOT?: room_tblScalarWhereWithAggregatesInput | room_tblScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"room_tbl"> | number
    busy?: IntWithAggregatesFilter<"room_tbl"> | number
  }

  export type game_usersWhereInput = {
    AND?: game_usersWhereInput | game_usersWhereInput[]
    OR?: game_usersWhereInput[]
    NOT?: game_usersWhereInput | game_usersWhereInput[]
    id?: IntFilter<"game_users"> | number
    username?: StringFilter<"game_users"> | string
    score?: IntNullableFilter<"game_users"> | number | null
    user_responses?: User_responsesListRelationFilter
  }

  export type game_usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    score?: SortOrderInput | SortOrder
    user_responses?: user_responsesOrderByRelationAggregateInput
  }

  export type game_usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: game_usersWhereInput | game_usersWhereInput[]
    OR?: game_usersWhereInput[]
    NOT?: game_usersWhereInput | game_usersWhereInput[]
    username?: StringFilter<"game_users"> | string
    score?: IntNullableFilter<"game_users"> | number | null
    user_responses?: User_responsesListRelationFilter
  }, "id">

  export type game_usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    score?: SortOrderInput | SortOrder
    _count?: game_usersCountOrderByAggregateInput
    _avg?: game_usersAvgOrderByAggregateInput
    _max?: game_usersMaxOrderByAggregateInput
    _min?: game_usersMinOrderByAggregateInput
    _sum?: game_usersSumOrderByAggregateInput
  }

  export type game_usersScalarWhereWithAggregatesInput = {
    AND?: game_usersScalarWhereWithAggregatesInput | game_usersScalarWhereWithAggregatesInput[]
    OR?: game_usersScalarWhereWithAggregatesInput[]
    NOT?: game_usersScalarWhereWithAggregatesInput | game_usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"game_users"> | number
    username?: StringWithAggregatesFilter<"game_users"> | string
    score?: IntNullableWithAggregatesFilter<"game_users"> | number | null
  }

  export type answersCreateInput = {
    answer_text: string
    questions?: questionsCreateNestedOneWithoutAnswersInput
    user_responses?: user_responsesCreateNestedManyWithoutAnswersInput
  }

  export type answersUncheckedCreateInput = {
    id?: number
    question_id?: number | null
    answer_text: string
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutAnswersInput
  }

  export type answersUpdateInput = {
    answer_text?: StringFieldUpdateOperationsInput | string
    questions?: questionsUpdateOneWithoutAnswersNestedInput
    user_responses?: user_responsesUpdateManyWithoutAnswersNestedInput
  }

  export type answersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_text?: StringFieldUpdateOperationsInput | string
    user_responses?: user_responsesUncheckedUpdateManyWithoutAnswersNestedInput
  }

  export type answersCreateManyInput = {
    id?: number
    question_id?: number | null
    answer_text: string
  }

  export type answersUpdateManyMutationInput = {
    answer_text?: StringFieldUpdateOperationsInput | string
  }

  export type answersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_text?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesCreateInput = {
    name: string
    questions?: questionsCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: number
    name: string
    questions?: questionsUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    questions?: questionsUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    questions?: questionsUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesCreateManyInput = {
    id?: number
    name: string
  }

  export type categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type questionsCreateInput = {
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    answers?: answersCreateNestedManyWithoutQuestionsInput
    categories?: categoriesCreateNestedOneWithoutQuestionsInput
    user_responses?: user_responsesCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateInput = {
    id?: number
    category_id?: number | null
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    answers?: answersUncheckedCreateNestedManyWithoutQuestionsInput
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUpdateInput = {
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: answersUpdateManyWithoutQuestionsNestedInput
    categories?: categoriesUpdateOneWithoutQuestionsNestedInput
    user_responses?: user_responsesUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: answersUncheckedUpdateManyWithoutQuestionsNestedInput
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsCreateManyInput = {
    id?: number
    category_id?: number | null
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
  }

  export type questionsUpdateManyMutationInput = {
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type questionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_responsesCreateInput = {
    is_correct?: boolean | null
    users?: game_usersCreateNestedOneWithoutUser_responsesInput
    questions?: questionsCreateNestedOneWithoutUser_responsesInput
    answers?: answersCreateNestedOneWithoutUser_responsesInput
  }

  export type user_responsesUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    question_id?: number | null
    answer_id?: number | null
    is_correct?: boolean | null
  }

  export type user_responsesUpdateInput = {
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: game_usersUpdateOneWithoutUser_responsesNestedInput
    questions?: questionsUpdateOneWithoutUser_responsesNestedInput
    answers?: answersUpdateOneWithoutUser_responsesNestedInput
  }

  export type user_responsesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type user_responsesCreateManyInput = {
    id?: number
    user_id?: number | null
    question_id?: number | null
    answer_id?: number | null
    is_correct?: boolean | null
  }

  export type user_responsesUpdateManyMutationInput = {
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type user_responsesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type room_tblCreateInput = {
    busy?: number
  }

  export type room_tblUncheckedCreateInput = {
    id?: number
    busy?: number
  }

  export type room_tblUpdateInput = {
    busy?: IntFieldUpdateOperationsInput | number
  }

  export type room_tblUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    busy?: IntFieldUpdateOperationsInput | number
  }

  export type room_tblCreateManyInput = {
    id?: number
    busy?: number
  }

  export type room_tblUpdateManyMutationInput = {
    busy?: IntFieldUpdateOperationsInput | number
  }

  export type room_tblUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    busy?: IntFieldUpdateOperationsInput | number
  }

  export type game_usersCreateInput = {
    username: string
    score?: number | null
    user_responses?: user_responsesCreateNestedManyWithoutUsersInput
  }

  export type game_usersUncheckedCreateInput = {
    id?: number
    username: string
    score?: number | null
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type game_usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    user_responses?: user_responsesUpdateManyWithoutUsersNestedInput
  }

  export type game_usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    user_responses?: user_responsesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type game_usersCreateManyInput = {
    id?: number
    username: string
    score?: number | null
  }

  export type game_usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type game_usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type QuestionsNullableRelationFilter = {
    is?: questionsWhereInput | null
    isNot?: questionsWhereInput | null
  }

  export type User_responsesListRelationFilter = {
    every?: user_responsesWhereInput
    some?: user_responsesWhereInput
    none?: user_responsesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type user_responsesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type answersCountOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrder
  }

  export type answersAvgOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
  }

  export type answersMaxOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrder
  }

  export type answersMinOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrder
  }

  export type answersSumOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type QuestionsListRelationFilter = {
    every?: questionsWhereInput
    some?: questionsWhereInput
    none?: questionsWhereInput
  }

  export type questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumquestions_difficulty_levelFilter<$PrismaModel = never> = {
    equals?: $Enums.questions_difficulty_level | Enumquestions_difficulty_levelFieldRefInput<$PrismaModel>
    in?: $Enums.questions_difficulty_level[]
    notIn?: $Enums.questions_difficulty_level[]
    not?: NestedEnumquestions_difficulty_levelFilter<$PrismaModel> | $Enums.questions_difficulty_level
  }

  export type AnswersListRelationFilter = {
    every?: answersWhereInput
    some?: answersWhereInput
    none?: answersWhereInput
  }

  export type CategoriesNullableRelationFilter = {
    is?: categoriesWhereInput | null
    isNot?: categoriesWhereInput | null
  }

  export type answersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type questionsCountOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    question_text?: SortOrder
    difficulty_level?: SortOrder
    correct_answer_id?: SortOrder
  }

  export type questionsAvgOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    correct_answer_id?: SortOrder
  }

  export type questionsMaxOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    question_text?: SortOrder
    difficulty_level?: SortOrder
    correct_answer_id?: SortOrder
  }

  export type questionsMinOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    question_text?: SortOrder
    difficulty_level?: SortOrder
    correct_answer_id?: SortOrder
  }

  export type questionsSumOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    correct_answer_id?: SortOrder
  }

  export type Enumquestions_difficulty_levelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.questions_difficulty_level | Enumquestions_difficulty_levelFieldRefInput<$PrismaModel>
    in?: $Enums.questions_difficulty_level[]
    notIn?: $Enums.questions_difficulty_level[]
    not?: NestedEnumquestions_difficulty_levelWithAggregatesFilter<$PrismaModel> | $Enums.questions_difficulty_level
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumquestions_difficulty_levelFilter<$PrismaModel>
    _max?: NestedEnumquestions_difficulty_levelFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type Game_usersNullableRelationFilter = {
    is?: game_usersWhereInput | null
    isNot?: game_usersWhereInput | null
  }

  export type AnswersNullableRelationFilter = {
    is?: answersWhereInput | null
    isNot?: answersWhereInput | null
  }

  export type user_responsesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    answer_id?: SortOrder
    is_correct?: SortOrder
  }

  export type user_responsesAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    answer_id?: SortOrder
  }

  export type user_responsesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    answer_id?: SortOrder
    is_correct?: SortOrder
  }

  export type user_responsesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    answer_id?: SortOrder
    is_correct?: SortOrder
  }

  export type user_responsesSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    answer_id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type room_tblCountOrderByAggregateInput = {
    id?: SortOrder
    busy?: SortOrder
  }

  export type room_tblAvgOrderByAggregateInput = {
    id?: SortOrder
    busy?: SortOrder
  }

  export type room_tblMaxOrderByAggregateInput = {
    id?: SortOrder
    busy?: SortOrder
  }

  export type room_tblMinOrderByAggregateInput = {
    id?: SortOrder
    busy?: SortOrder
  }

  export type room_tblSumOrderByAggregateInput = {
    id?: SortOrder
    busy?: SortOrder
  }

  export type game_usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    score?: SortOrder
  }

  export type game_usersAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type game_usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    score?: SortOrder
  }

  export type game_usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    score?: SortOrder
  }

  export type game_usersSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type questionsCreateNestedOneWithoutAnswersInput = {
    create?: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: questionsCreateOrConnectWithoutAnswersInput
    connect?: questionsWhereUniqueInput
  }

  export type user_responsesCreateNestedManyWithoutAnswersInput = {
    create?: XOR<user_responsesCreateWithoutAnswersInput, user_responsesUncheckedCreateWithoutAnswersInput> | user_responsesCreateWithoutAnswersInput[] | user_responsesUncheckedCreateWithoutAnswersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutAnswersInput | user_responsesCreateOrConnectWithoutAnswersInput[]
    createMany?: user_responsesCreateManyAnswersInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type user_responsesUncheckedCreateNestedManyWithoutAnswersInput = {
    create?: XOR<user_responsesCreateWithoutAnswersInput, user_responsesUncheckedCreateWithoutAnswersInput> | user_responsesCreateWithoutAnswersInput[] | user_responsesUncheckedCreateWithoutAnswersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutAnswersInput | user_responsesCreateOrConnectWithoutAnswersInput[]
    createMany?: user_responsesCreateManyAnswersInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type questionsUpdateOneWithoutAnswersNestedInput = {
    create?: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: questionsCreateOrConnectWithoutAnswersInput
    upsert?: questionsUpsertWithoutAnswersInput
    disconnect?: questionsWhereInput | boolean
    delete?: questionsWhereInput | boolean
    connect?: questionsWhereUniqueInput
    update?: XOR<XOR<questionsUpdateToOneWithWhereWithoutAnswersInput, questionsUpdateWithoutAnswersInput>, questionsUncheckedUpdateWithoutAnswersInput>
  }

  export type user_responsesUpdateManyWithoutAnswersNestedInput = {
    create?: XOR<user_responsesCreateWithoutAnswersInput, user_responsesUncheckedCreateWithoutAnswersInput> | user_responsesCreateWithoutAnswersInput[] | user_responsesUncheckedCreateWithoutAnswersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutAnswersInput | user_responsesCreateOrConnectWithoutAnswersInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutAnswersInput | user_responsesUpsertWithWhereUniqueWithoutAnswersInput[]
    createMany?: user_responsesCreateManyAnswersInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutAnswersInput | user_responsesUpdateWithWhereUniqueWithoutAnswersInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutAnswersInput | user_responsesUpdateManyWithWhereWithoutAnswersInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type user_responsesUncheckedUpdateManyWithoutAnswersNestedInput = {
    create?: XOR<user_responsesCreateWithoutAnswersInput, user_responsesUncheckedCreateWithoutAnswersInput> | user_responsesCreateWithoutAnswersInput[] | user_responsesUncheckedCreateWithoutAnswersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutAnswersInput | user_responsesCreateOrConnectWithoutAnswersInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutAnswersInput | user_responsesUpsertWithWhereUniqueWithoutAnswersInput[]
    createMany?: user_responsesCreateManyAnswersInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutAnswersInput | user_responsesUpdateWithWhereUniqueWithoutAnswersInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutAnswersInput | user_responsesUpdateManyWithWhereWithoutAnswersInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type questionsCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<questionsCreateWithoutCategoriesInput, questionsUncheckedCreateWithoutCategoriesInput> | questionsCreateWithoutCategoriesInput[] | questionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoriesInput | questionsCreateOrConnectWithoutCategoriesInput[]
    createMany?: questionsCreateManyCategoriesInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type questionsUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<questionsCreateWithoutCategoriesInput, questionsUncheckedCreateWithoutCategoriesInput> | questionsCreateWithoutCategoriesInput[] | questionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoriesInput | questionsCreateOrConnectWithoutCategoriesInput[]
    createMany?: questionsCreateManyCategoriesInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type questionsUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<questionsCreateWithoutCategoriesInput, questionsUncheckedCreateWithoutCategoriesInput> | questionsCreateWithoutCategoriesInput[] | questionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoriesInput | questionsCreateOrConnectWithoutCategoriesInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutCategoriesInput | questionsUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: questionsCreateManyCategoriesInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutCategoriesInput | questionsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutCategoriesInput | questionsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type questionsUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<questionsCreateWithoutCategoriesInput, questionsUncheckedCreateWithoutCategoriesInput> | questionsCreateWithoutCategoriesInput[] | questionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoriesInput | questionsCreateOrConnectWithoutCategoriesInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutCategoriesInput | questionsUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: questionsCreateManyCategoriesInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutCategoriesInput | questionsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutCategoriesInput | questionsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type answersCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
  }

  export type categoriesCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutQuestionsInput
    connect?: categoriesWhereUniqueInput
  }

  export type user_responsesCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type answersUncheckedCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
  }

  export type user_responsesUncheckedCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type Enumquestions_difficulty_levelFieldUpdateOperationsInput = {
    set?: $Enums.questions_difficulty_level
  }

  export type answersUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    upsert?: answersUpsertWithWhereUniqueWithoutQuestionsInput | answersUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    set?: answersWhereUniqueInput | answersWhereUniqueInput[]
    disconnect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    delete?: answersWhereUniqueInput | answersWhereUniqueInput[]
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    update?: answersUpdateWithWhereUniqueWithoutQuestionsInput | answersUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: answersUpdateManyWithWhereWithoutQuestionsInput | answersUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: answersScalarWhereInput | answersScalarWhereInput[]
  }

  export type categoriesUpdateOneWithoutQuestionsNestedInput = {
    create?: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutQuestionsInput
    upsert?: categoriesUpsertWithoutQuestionsInput
    disconnect?: categoriesWhereInput | boolean
    delete?: categoriesWhereInput | boolean
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutQuestionsInput, categoriesUpdateWithoutQuestionsInput>, categoriesUncheckedUpdateWithoutQuestionsInput>
  }

  export type user_responsesUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutQuestionsInput | user_responsesUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutQuestionsInput | user_responsesUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutQuestionsInput | user_responsesUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type answersUncheckedUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    upsert?: answersUpsertWithWhereUniqueWithoutQuestionsInput | answersUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    set?: answersWhereUniqueInput | answersWhereUniqueInput[]
    disconnect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    delete?: answersWhereUniqueInput | answersWhereUniqueInput[]
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    update?: answersUpdateWithWhereUniqueWithoutQuestionsInput | answersUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: answersUpdateManyWithWhereWithoutQuestionsInput | answersUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: answersScalarWhereInput | answersScalarWhereInput[]
  }

  export type user_responsesUncheckedUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput> | user_responsesCreateWithoutQuestionsInput[] | user_responsesUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutQuestionsInput | user_responsesCreateOrConnectWithoutQuestionsInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutQuestionsInput | user_responsesUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: user_responsesCreateManyQuestionsInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutQuestionsInput | user_responsesUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutQuestionsInput | user_responsesUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type game_usersCreateNestedOneWithoutUser_responsesInput = {
    create?: XOR<game_usersCreateWithoutUser_responsesInput, game_usersUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: game_usersCreateOrConnectWithoutUser_responsesInput
    connect?: game_usersWhereUniqueInput
  }

  export type questionsCreateNestedOneWithoutUser_responsesInput = {
    create?: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: questionsCreateOrConnectWithoutUser_responsesInput
    connect?: questionsWhereUniqueInput
  }

  export type answersCreateNestedOneWithoutUser_responsesInput = {
    create?: XOR<answersCreateWithoutUser_responsesInput, answersUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: answersCreateOrConnectWithoutUser_responsesInput
    connect?: answersWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type game_usersUpdateOneWithoutUser_responsesNestedInput = {
    create?: XOR<game_usersCreateWithoutUser_responsesInput, game_usersUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: game_usersCreateOrConnectWithoutUser_responsesInput
    upsert?: game_usersUpsertWithoutUser_responsesInput
    disconnect?: game_usersWhereInput | boolean
    delete?: game_usersWhereInput | boolean
    connect?: game_usersWhereUniqueInput
    update?: XOR<XOR<game_usersUpdateToOneWithWhereWithoutUser_responsesInput, game_usersUpdateWithoutUser_responsesInput>, game_usersUncheckedUpdateWithoutUser_responsesInput>
  }

  export type questionsUpdateOneWithoutUser_responsesNestedInput = {
    create?: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: questionsCreateOrConnectWithoutUser_responsesInput
    upsert?: questionsUpsertWithoutUser_responsesInput
    disconnect?: questionsWhereInput | boolean
    delete?: questionsWhereInput | boolean
    connect?: questionsWhereUniqueInput
    update?: XOR<XOR<questionsUpdateToOneWithWhereWithoutUser_responsesInput, questionsUpdateWithoutUser_responsesInput>, questionsUncheckedUpdateWithoutUser_responsesInput>
  }

  export type answersUpdateOneWithoutUser_responsesNestedInput = {
    create?: XOR<answersCreateWithoutUser_responsesInput, answersUncheckedCreateWithoutUser_responsesInput>
    connectOrCreate?: answersCreateOrConnectWithoutUser_responsesInput
    upsert?: answersUpsertWithoutUser_responsesInput
    disconnect?: answersWhereInput | boolean
    delete?: answersWhereInput | boolean
    connect?: answersWhereUniqueInput
    update?: XOR<XOR<answersUpdateToOneWithWhereWithoutUser_responsesInput, answersUpdateWithoutUser_responsesInput>, answersUncheckedUpdateWithoutUser_responsesInput>
  }

  export type user_responsesCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_responsesCreateWithoutUsersInput, user_responsesUncheckedCreateWithoutUsersInput> | user_responsesCreateWithoutUsersInput[] | user_responsesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutUsersInput | user_responsesCreateOrConnectWithoutUsersInput[]
    createMany?: user_responsesCreateManyUsersInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type user_responsesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_responsesCreateWithoutUsersInput, user_responsesUncheckedCreateWithoutUsersInput> | user_responsesCreateWithoutUsersInput[] | user_responsesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutUsersInput | user_responsesCreateOrConnectWithoutUsersInput[]
    createMany?: user_responsesCreateManyUsersInputEnvelope
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
  }

  export type user_responsesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_responsesCreateWithoutUsersInput, user_responsesUncheckedCreateWithoutUsersInput> | user_responsesCreateWithoutUsersInput[] | user_responsesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutUsersInput | user_responsesCreateOrConnectWithoutUsersInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutUsersInput | user_responsesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_responsesCreateManyUsersInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutUsersInput | user_responsesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutUsersInput | user_responsesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type user_responsesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_responsesCreateWithoutUsersInput, user_responsesUncheckedCreateWithoutUsersInput> | user_responsesCreateWithoutUsersInput[] | user_responsesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_responsesCreateOrConnectWithoutUsersInput | user_responsesCreateOrConnectWithoutUsersInput[]
    upsert?: user_responsesUpsertWithWhereUniqueWithoutUsersInput | user_responsesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_responsesCreateManyUsersInputEnvelope
    set?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    disconnect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    delete?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    connect?: user_responsesWhereUniqueInput | user_responsesWhereUniqueInput[]
    update?: user_responsesUpdateWithWhereUniqueWithoutUsersInput | user_responsesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_responsesUpdateManyWithWhereWithoutUsersInput | user_responsesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumquestions_difficulty_levelFilter<$PrismaModel = never> = {
    equals?: $Enums.questions_difficulty_level | Enumquestions_difficulty_levelFieldRefInput<$PrismaModel>
    in?: $Enums.questions_difficulty_level[]
    notIn?: $Enums.questions_difficulty_level[]
    not?: NestedEnumquestions_difficulty_levelFilter<$PrismaModel> | $Enums.questions_difficulty_level
  }

  export type NestedEnumquestions_difficulty_levelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.questions_difficulty_level | Enumquestions_difficulty_levelFieldRefInput<$PrismaModel>
    in?: $Enums.questions_difficulty_level[]
    notIn?: $Enums.questions_difficulty_level[]
    not?: NestedEnumquestions_difficulty_levelWithAggregatesFilter<$PrismaModel> | $Enums.questions_difficulty_level
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumquestions_difficulty_levelFilter<$PrismaModel>
    _max?: NestedEnumquestions_difficulty_levelFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type questionsCreateWithoutAnswersInput = {
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    categories?: categoriesCreateNestedOneWithoutQuestionsInput
    user_responses?: user_responsesCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutAnswersInput = {
    id?: number
    category_id?: number | null
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutAnswersInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
  }

  export type user_responsesCreateWithoutAnswersInput = {
    is_correct?: boolean | null
    users?: game_usersCreateNestedOneWithoutUser_responsesInput
    questions?: questionsCreateNestedOneWithoutUser_responsesInput
  }

  export type user_responsesUncheckedCreateWithoutAnswersInput = {
    id?: number
    user_id?: number | null
    question_id?: number | null
    is_correct?: boolean | null
  }

  export type user_responsesCreateOrConnectWithoutAnswersInput = {
    where: user_responsesWhereUniqueInput
    create: XOR<user_responsesCreateWithoutAnswersInput, user_responsesUncheckedCreateWithoutAnswersInput>
  }

  export type user_responsesCreateManyAnswersInputEnvelope = {
    data: user_responsesCreateManyAnswersInput | user_responsesCreateManyAnswersInput[]
    skipDuplicates?: boolean
  }

  export type questionsUpsertWithoutAnswersInput = {
    update: XOR<questionsUpdateWithoutAnswersInput, questionsUncheckedUpdateWithoutAnswersInput>
    create: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
    where?: questionsWhereInput
  }

  export type questionsUpdateToOneWithWhereWithoutAnswersInput = {
    where?: questionsWhereInput
    data: XOR<questionsUpdateWithoutAnswersInput, questionsUncheckedUpdateWithoutAnswersInput>
  }

  export type questionsUpdateWithoutAnswersInput = {
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: categoriesUpdateOneWithoutQuestionsNestedInput
    user_responses?: user_responsesUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type user_responsesUpsertWithWhereUniqueWithoutAnswersInput = {
    where: user_responsesWhereUniqueInput
    update: XOR<user_responsesUpdateWithoutAnswersInput, user_responsesUncheckedUpdateWithoutAnswersInput>
    create: XOR<user_responsesCreateWithoutAnswersInput, user_responsesUncheckedCreateWithoutAnswersInput>
  }

  export type user_responsesUpdateWithWhereUniqueWithoutAnswersInput = {
    where: user_responsesWhereUniqueInput
    data: XOR<user_responsesUpdateWithoutAnswersInput, user_responsesUncheckedUpdateWithoutAnswersInput>
  }

  export type user_responsesUpdateManyWithWhereWithoutAnswersInput = {
    where: user_responsesScalarWhereInput
    data: XOR<user_responsesUpdateManyMutationInput, user_responsesUncheckedUpdateManyWithoutAnswersInput>
  }

  export type user_responsesScalarWhereInput = {
    AND?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
    OR?: user_responsesScalarWhereInput[]
    NOT?: user_responsesScalarWhereInput | user_responsesScalarWhereInput[]
    id?: IntFilter<"user_responses"> | number
    user_id?: IntNullableFilter<"user_responses"> | number | null
    question_id?: IntNullableFilter<"user_responses"> | number | null
    answer_id?: IntNullableFilter<"user_responses"> | number | null
    is_correct?: BoolNullableFilter<"user_responses"> | boolean | null
  }

  export type questionsCreateWithoutCategoriesInput = {
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    answers?: answersCreateNestedManyWithoutQuestionsInput
    user_responses?: user_responsesCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutCategoriesInput = {
    id?: number
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    answers?: answersUncheckedCreateNestedManyWithoutQuestionsInput
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutCategoriesInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutCategoriesInput, questionsUncheckedCreateWithoutCategoriesInput>
  }

  export type questionsCreateManyCategoriesInputEnvelope = {
    data: questionsCreateManyCategoriesInput | questionsCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type questionsUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: questionsWhereUniqueInput
    update: XOR<questionsUpdateWithoutCategoriesInput, questionsUncheckedUpdateWithoutCategoriesInput>
    create: XOR<questionsCreateWithoutCategoriesInput, questionsUncheckedCreateWithoutCategoriesInput>
  }

  export type questionsUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: questionsWhereUniqueInput
    data: XOR<questionsUpdateWithoutCategoriesInput, questionsUncheckedUpdateWithoutCategoriesInput>
  }

  export type questionsUpdateManyWithWhereWithoutCategoriesInput = {
    where: questionsScalarWhereInput
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type questionsScalarWhereInput = {
    AND?: questionsScalarWhereInput | questionsScalarWhereInput[]
    OR?: questionsScalarWhereInput[]
    NOT?: questionsScalarWhereInput | questionsScalarWhereInput[]
    id?: IntFilter<"questions"> | number
    category_id?: IntNullableFilter<"questions"> | number | null
    question_text?: StringFilter<"questions"> | string
    difficulty_level?: Enumquestions_difficulty_levelFilter<"questions"> | $Enums.questions_difficulty_level
    correct_answer_id?: IntNullableFilter<"questions"> | number | null
  }

  export type answersCreateWithoutQuestionsInput = {
    answer_text: string
    user_responses?: user_responsesCreateNestedManyWithoutAnswersInput
  }

  export type answersUncheckedCreateWithoutQuestionsInput = {
    id?: number
    answer_text: string
    user_responses?: user_responsesUncheckedCreateNestedManyWithoutAnswersInput
  }

  export type answersCreateOrConnectWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    create: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput>
  }

  export type answersCreateManyQuestionsInputEnvelope = {
    data: answersCreateManyQuestionsInput | answersCreateManyQuestionsInput[]
    skipDuplicates?: boolean
  }

  export type categoriesCreateWithoutQuestionsInput = {
    name: string
  }

  export type categoriesUncheckedCreateWithoutQuestionsInput = {
    id?: number
    name: string
  }

  export type categoriesCreateOrConnectWithoutQuestionsInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
  }

  export type user_responsesCreateWithoutQuestionsInput = {
    is_correct?: boolean | null
    users?: game_usersCreateNestedOneWithoutUser_responsesInput
    answers?: answersCreateNestedOneWithoutUser_responsesInput
  }

  export type user_responsesUncheckedCreateWithoutQuestionsInput = {
    id?: number
    user_id?: number | null
    answer_id?: number | null
    is_correct?: boolean | null
  }

  export type user_responsesCreateOrConnectWithoutQuestionsInput = {
    where: user_responsesWhereUniqueInput
    create: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput>
  }

  export type user_responsesCreateManyQuestionsInputEnvelope = {
    data: user_responsesCreateManyQuestionsInput | user_responsesCreateManyQuestionsInput[]
    skipDuplicates?: boolean
  }

  export type answersUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    update: XOR<answersUpdateWithoutQuestionsInput, answersUncheckedUpdateWithoutQuestionsInput>
    create: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput>
  }

  export type answersUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    data: XOR<answersUpdateWithoutQuestionsInput, answersUncheckedUpdateWithoutQuestionsInput>
  }

  export type answersUpdateManyWithWhereWithoutQuestionsInput = {
    where: answersScalarWhereInput
    data: XOR<answersUpdateManyMutationInput, answersUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type answersScalarWhereInput = {
    AND?: answersScalarWhereInput | answersScalarWhereInput[]
    OR?: answersScalarWhereInput[]
    NOT?: answersScalarWhereInput | answersScalarWhereInput[]
    id?: IntFilter<"answers"> | number
    question_id?: IntNullableFilter<"answers"> | number | null
    answer_text?: StringFilter<"answers"> | string
  }

  export type categoriesUpsertWithoutQuestionsInput = {
    update: XOR<categoriesUpdateWithoutQuestionsInput, categoriesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutQuestionsInput, categoriesUncheckedUpdateWithoutQuestionsInput>
  }

  export type categoriesUpdateWithoutQuestionsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type user_responsesUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: user_responsesWhereUniqueInput
    update: XOR<user_responsesUpdateWithoutQuestionsInput, user_responsesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<user_responsesCreateWithoutQuestionsInput, user_responsesUncheckedCreateWithoutQuestionsInput>
  }

  export type user_responsesUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: user_responsesWhereUniqueInput
    data: XOR<user_responsesUpdateWithoutQuestionsInput, user_responsesUncheckedUpdateWithoutQuestionsInput>
  }

  export type user_responsesUpdateManyWithWhereWithoutQuestionsInput = {
    where: user_responsesScalarWhereInput
    data: XOR<user_responsesUpdateManyMutationInput, user_responsesUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type game_usersCreateWithoutUser_responsesInput = {
    username: string
    score?: number | null
  }

  export type game_usersUncheckedCreateWithoutUser_responsesInput = {
    id?: number
    username: string
    score?: number | null
  }

  export type game_usersCreateOrConnectWithoutUser_responsesInput = {
    where: game_usersWhereUniqueInput
    create: XOR<game_usersCreateWithoutUser_responsesInput, game_usersUncheckedCreateWithoutUser_responsesInput>
  }

  export type questionsCreateWithoutUser_responsesInput = {
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    answers?: answersCreateNestedManyWithoutQuestionsInput
    categories?: categoriesCreateNestedOneWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutUser_responsesInput = {
    id?: number
    category_id?: number | null
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
    answers?: answersUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutUser_responsesInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
  }

  export type answersCreateWithoutUser_responsesInput = {
    answer_text: string
    questions?: questionsCreateNestedOneWithoutAnswersInput
  }

  export type answersUncheckedCreateWithoutUser_responsesInput = {
    id?: number
    question_id?: number | null
    answer_text: string
  }

  export type answersCreateOrConnectWithoutUser_responsesInput = {
    where: answersWhereUniqueInput
    create: XOR<answersCreateWithoutUser_responsesInput, answersUncheckedCreateWithoutUser_responsesInput>
  }

  export type game_usersUpsertWithoutUser_responsesInput = {
    update: XOR<game_usersUpdateWithoutUser_responsesInput, game_usersUncheckedUpdateWithoutUser_responsesInput>
    create: XOR<game_usersCreateWithoutUser_responsesInput, game_usersUncheckedCreateWithoutUser_responsesInput>
    where?: game_usersWhereInput
  }

  export type game_usersUpdateToOneWithWhereWithoutUser_responsesInput = {
    where?: game_usersWhereInput
    data: XOR<game_usersUpdateWithoutUser_responsesInput, game_usersUncheckedUpdateWithoutUser_responsesInput>
  }

  export type game_usersUpdateWithoutUser_responsesInput = {
    username?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type game_usersUncheckedUpdateWithoutUser_responsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type questionsUpsertWithoutUser_responsesInput = {
    update: XOR<questionsUpdateWithoutUser_responsesInput, questionsUncheckedUpdateWithoutUser_responsesInput>
    create: XOR<questionsCreateWithoutUser_responsesInput, questionsUncheckedCreateWithoutUser_responsesInput>
    where?: questionsWhereInput
  }

  export type questionsUpdateToOneWithWhereWithoutUser_responsesInput = {
    where?: questionsWhereInput
    data: XOR<questionsUpdateWithoutUser_responsesInput, questionsUncheckedUpdateWithoutUser_responsesInput>
  }

  export type questionsUpdateWithoutUser_responsesInput = {
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: answersUpdateManyWithoutQuestionsNestedInput
    categories?: categoriesUpdateOneWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutUser_responsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: answersUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type answersUpsertWithoutUser_responsesInput = {
    update: XOR<answersUpdateWithoutUser_responsesInput, answersUncheckedUpdateWithoutUser_responsesInput>
    create: XOR<answersCreateWithoutUser_responsesInput, answersUncheckedCreateWithoutUser_responsesInput>
    where?: answersWhereInput
  }

  export type answersUpdateToOneWithWhereWithoutUser_responsesInput = {
    where?: answersWhereInput
    data: XOR<answersUpdateWithoutUser_responsesInput, answersUncheckedUpdateWithoutUser_responsesInput>
  }

  export type answersUpdateWithoutUser_responsesInput = {
    answer_text?: StringFieldUpdateOperationsInput | string
    questions?: questionsUpdateOneWithoutAnswersNestedInput
  }

  export type answersUncheckedUpdateWithoutUser_responsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_text?: StringFieldUpdateOperationsInput | string
  }

  export type user_responsesCreateWithoutUsersInput = {
    is_correct?: boolean | null
    questions?: questionsCreateNestedOneWithoutUser_responsesInput
    answers?: answersCreateNestedOneWithoutUser_responsesInput
  }

  export type user_responsesUncheckedCreateWithoutUsersInput = {
    id?: number
    question_id?: number | null
    answer_id?: number | null
    is_correct?: boolean | null
  }

  export type user_responsesCreateOrConnectWithoutUsersInput = {
    where: user_responsesWhereUniqueInput
    create: XOR<user_responsesCreateWithoutUsersInput, user_responsesUncheckedCreateWithoutUsersInput>
  }

  export type user_responsesCreateManyUsersInputEnvelope = {
    data: user_responsesCreateManyUsersInput | user_responsesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type user_responsesUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_responsesWhereUniqueInput
    update: XOR<user_responsesUpdateWithoutUsersInput, user_responsesUncheckedUpdateWithoutUsersInput>
    create: XOR<user_responsesCreateWithoutUsersInput, user_responsesUncheckedCreateWithoutUsersInput>
  }

  export type user_responsesUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_responsesWhereUniqueInput
    data: XOR<user_responsesUpdateWithoutUsersInput, user_responsesUncheckedUpdateWithoutUsersInput>
  }

  export type user_responsesUpdateManyWithWhereWithoutUsersInput = {
    where: user_responsesScalarWhereInput
    data: XOR<user_responsesUpdateManyMutationInput, user_responsesUncheckedUpdateManyWithoutUsersInput>
  }

  export type user_responsesCreateManyAnswersInput = {
    id?: number
    user_id?: number | null
    question_id?: number | null
    is_correct?: boolean | null
  }

  export type user_responsesUpdateWithoutAnswersInput = {
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: game_usersUpdateOneWithoutUser_responsesNestedInput
    questions?: questionsUpdateOneWithoutUser_responsesNestedInput
  }

  export type user_responsesUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type user_responsesUncheckedUpdateManyWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type questionsCreateManyCategoriesInput = {
    id?: number
    question_text: string
    difficulty_level: $Enums.questions_difficulty_level
    correct_answer_id?: number | null
  }

  export type questionsUpdateWithoutCategoriesInput = {
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: answersUpdateManyWithoutQuestionsNestedInput
    user_responses?: user_responsesUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: answersUncheckedUpdateManyWithoutQuestionsNestedInput
    user_responses?: user_responsesUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_text?: StringFieldUpdateOperationsInput | string
    difficulty_level?: Enumquestions_difficulty_levelFieldUpdateOperationsInput | $Enums.questions_difficulty_level
    correct_answer_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type answersCreateManyQuestionsInput = {
    id?: number
    answer_text: string
  }

  export type user_responsesCreateManyQuestionsInput = {
    id?: number
    user_id?: number | null
    answer_id?: number | null
    is_correct?: boolean | null
  }

  export type answersUpdateWithoutQuestionsInput = {
    answer_text?: StringFieldUpdateOperationsInput | string
    user_responses?: user_responsesUpdateManyWithoutAnswersNestedInput
  }

  export type answersUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer_text?: StringFieldUpdateOperationsInput | string
    user_responses?: user_responsesUncheckedUpdateManyWithoutAnswersNestedInput
  }

  export type answersUncheckedUpdateManyWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer_text?: StringFieldUpdateOperationsInput | string
  }

  export type user_responsesUpdateWithoutQuestionsInput = {
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: game_usersUpdateOneWithoutUser_responsesNestedInput
    answers?: answersUpdateOneWithoutUser_responsesNestedInput
  }

  export type user_responsesUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type user_responsesUncheckedUpdateManyWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type user_responsesCreateManyUsersInput = {
    id?: number
    question_id?: number | null
    answer_id?: number | null
    is_correct?: boolean | null
  }

  export type user_responsesUpdateWithoutUsersInput = {
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questions?: questionsUpdateOneWithoutUser_responsesNestedInput
    answers?: answersUpdateOneWithoutUser_responsesNestedInput
  }

  export type user_responsesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type user_responsesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: NullableIntFieldUpdateOperationsInput | number | null
    answer_id?: NullableIntFieldUpdateOperationsInput | number | null
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AnswersCountOutputTypeDefaultArgs instead
     */
    export type AnswersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnswersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionsCountOutputTypeDefaultArgs instead
     */
    export type QuestionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Game_usersCountOutputTypeDefaultArgs instead
     */
    export type Game_usersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Game_usersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use answersDefaultArgs instead
     */
    export type answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = answersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesDefaultArgs instead
     */
    export type categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use questionsDefaultArgs instead
     */
    export type questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = questionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_responsesDefaultArgs instead
     */
    export type user_responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_responsesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use room_tblDefaultArgs instead
     */
    export type room_tblArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = room_tblDefaultArgs<ExtArgs>
    /**
     * @deprecated Use game_usersDefaultArgs instead
     */
    export type game_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = game_usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}